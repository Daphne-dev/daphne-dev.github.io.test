<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Daphne&#39;s blog</title>
    <link>https://daphne-dev.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Daphne의 개발 블로그입니다</description>
    <pubDate>Mon, 09 Oct 2023 08:55:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CircleCI로 S3 배포 자동화하기</title>
      <link>https://daphne-dev.github.io/2022/02/16/circleci-001/</link>
      <guid>https://daphne-dev.github.io/2022/02/16/circleci-001/</guid>
      <pubDate>Wed, 16 Feb 2022 08:31:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/circleci-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CircleCI란&quot;&gt;&lt;a href=&quot;#CircleCI란&quot; class=&quot;headerlink&quot; title=&quot;CircleCI란?&quot;&gt;&lt;/a&gt;CircleCI란?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CircleCI에서 CI는 지속적인 통합(continuous integration)의 약자인데, CI를 통해 우리는 생산성, 효율성, 신뢰성을가진 코드를 가질 수 있다. CircleCI는 이를 자동화해주는 도구로 test, build,deploy를 자동화할 수 있게 해준다.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/circleci-001.png" alt=""></p><h2 id="CircleCI란"><a href="#CircleCI란" class="headerlink" title="CircleCI란?"></a>CircleCI란?</h2><blockquote><p>CircleCI에서 CI는 지속적인 통합(continuous integration)의 약자인데, CI를 통해 우리는 생산성, 효율성, 신뢰성을가진 코드를 가질 수 있다. CircleCI는 이를 자동화해주는 도구로 test, build,deploy를 자동화할 수 있게 해준다.</p></blockquote><span id="more"></span><h2 id="CircleCI-장점"><a href="#CircleCI-장점" class="headerlink" title="CircleCI 장점"></a>CircleCI 장점</h2><ul><li>모든 작업에 SSH 연결을 통해 빌드 문제를 디버깅 할 수 있다.</li><li><code>.circleci/config.yml</code> 파일을 사용해서 작업을 병렬로 처리할 수 있다.</li><li>두 개의 간단한 키로 캐싱을 구성하여 워크플로에서 이전 작업의 데이터를 재사용 할 수 있다.</li><li>고유한 플랫폼 지원을 위해 자체 호스팅 러너를 구성할 수 있다.</li><li>재사용 가능한 구성 패키지인 <code>orbs</code>를 사용하여, 타사 도구와 쉽게 통합이 가능하며 반복되는 프로세스를 자동화 할 수 있다.</li><li>다양한 언어로 사전 빌드된 Docker 이미지 사용</li><li>자체 <code>test insight</code>를 통해 테스트 성능 분석 및 최적화 가능</li><li>CircleCI를 이용한 모든 작업에 대한 모니터링 제공</li></ul><h2 id="CircleCI-시작"><a href="#CircleCI-시작" class="headerlink" title="CircleCI 시작"></a>CircleCI 시작</h2><p><img src="/image/circleci-002.png" alt=""></p><p>Github, Bitbucket 등으로 로그인하여 자신의 프로젝트들의 CI/CD를 쉽고 빠르게 빌딩할 수 있다.<br>여기서는 Github으로 연결했다.</p><h2 id="CircleCI-구성하기"><a href="#CircleCI-구성하기" class="headerlink" title="CircleCI 구성하기"></a>CircleCI 구성하기</h2><p><img src="/image/circleci-003.png" alt=""></p><p><code>Projects</code>에 들어가면 연결한 Github에 있는 레포지토리들이 보이게 된다.</p><p><img src="/image/circleci-004.png" alt=""></p><p><code>Set Up Project</code>버튼을 누르면 CircleCI 설정 파일인 <code>.circleci/config.yml</code> 파일을 설정할 수 있다.<br>2가지 방법을 제안하는데, 스타터를 이용해 직접 위 파일을 작성하는 방법과 미리 설정된 파일을 사용하는 방법이다.</p><h2 id="S3에-배포-자동화-하기"><a href="#S3에-배포-자동화-하기" class="headerlink" title="S3에 배포 자동화 하기"></a>S3에 배포 자동화 하기</h2><h3 id="기본-구성"><a href="#기본-구성" class="headerlink" title="기본 구성"></a>기본 구성</h3><ol><li>version &amp; orbs</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line">  <span class="attr">orbs:</span></span><br><span class="line">    <span class="attr">aws-cli:</span> <span class="string">circleci/aws-cli@2.0.6</span></span><br><span class="line">    <span class="attr">aws-s3:</span> <span class="string">circleci/aws-s3@3.0</span></span><br></pre></td></tr></table></figure><ul><li>version: CircleCI의 버전 설정</li><li>orbs: 미리 구성된 패키지를 가져올 때 사용. 여기서는 awc-cli 와 aws-s3 패키지를 가져와서 간편한 설정이 가능하도록함.</li></ul><ol start="2"><li>jobs</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">depoly-S3:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><ul><li>jobs: 작업 목록을 의미</li></ul><ol start="3"><li>workflows</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build_and_deploy:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">build:</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">tags:</span></span><br><span class="line">              <span class="attr">only:</span> <span class="string">/v(\\d+)\\.[0-9]\\.[0-9]$/</span> <span class="comment"># 버전 정규식 v1.0.0의 형태</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span> <span class="string">/.*/</span> <span class="comment"># 모든 브랜치에 대해 트리거에서 제외한다.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">depoly-S3:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">build</span> <span class="comment"># 위의 build job의 작업이 끝나면 실행되도록 설정</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">tags:</span></span><br><span class="line">              <span class="attr">only:</span> <span class="string">/v(\\d+)\\.[0-9]\\.[0-9]$/</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span> <span class="string">/.\*/</span></span><br></pre></td></tr></table></figure><ul><li><p>workflows: 작업의 실행 순서 및 트리거 등을 설정한다.</p></li><li><p>filters: 작업을 실행하기 위한 트리거를 설정한다.</p><ul><li>tags<ul><li>only: 트리거로 사용할 태깅을 등록 한다. 정규식을 사용할 수 있다.</li></ul></li><li>branches<ul><li>ignore: 트리거에서 제외할 브랜치를 설정한다.</li></ul></li></ul></li><li><p>requires: 설정한 작업이 완료되면 실행되도록 설정한다.</p></li></ul><h3 id="프로젝트-빌드"><a href="#프로젝트-빌드" class="headerlink" title="프로젝트 빌드"></a>프로젝트 빌드</h3><ol><li>작업 경로 설정 및 node.js 도커 이미지 불러오기</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">~/repo</span></span><br><span class="line">  <span class="attr">docker:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cimg/node:14.18</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><ul><li>working_directory: 작업을 실행할 디렉토리 경로</li><li>docker: 작업 내부에서 사용할 도커 설정, 여기서는 빌드 시 yarn을 사용하므로 CircleCI가 node.js를 사용할 수 있도록 node.js 도커 이미지를 불러온다.</li><li>steps: 작업 수행 단계를 의미한다.</li></ul><ol start="2"><li>checkout</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">checkout</span></span><br></pre></td></tr></table></figure><ul><li>checkout: CircleCI의 CLI가 실행될 디렉토리를 코드가 있는 위치로 변경한다.</li></ul><ol start="3"><li>restore_cache</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">    <span class="attr">keys:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;yarn.lock&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1-dependencies-</span></span><br></pre></td></tr></table></figure><ul><li>restore_cache: 캐시 복구 기능, checksum 의 yarn.lock을 해싱한 값을 key로 삼아서 캐시를 저장하고 불러올 수 있다. 이전에 yarn을 통해 설치했던 node_modules 패키지들을 매번 설치하지 않고 불러오는게 가능하다.</li></ul><ol start="4"><li>yarn install</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">install</span> <span class="string">dependencies</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><ul><li>yarn install을 통해 dependency 설치</li></ul><ol start="5"><li>save_cache</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;yarn.lock&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="bullet">-</span> <span class="string">node_modules</span></span><br></pre></td></tr></table></figure><ul><li>save_cache: 캐시의 key를 지정하고 어떤 파일을 캐시할 것인지 경로를 설정</li></ul><ol start="6"><li>yarn build</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">build:production</span></span><br></pre></td></tr></table></figure><ul><li>프로젝트를 빌드한다.</li></ul><ol start="7"><li>빌드한 현재 작업 디렉토리를 저장하기</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">persist_to_workspace:</span> <span class="comment"># 빌드한 현재 작업 디렉토리 저장</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><ul><li>persist_to_workspace: 현재 작업 디렉토리를 저장할 수 있다. 이를 통해 다른 작업에서 빌드했던 결과물을 가져올 수 있게 된다.</li></ul><h3 id="S3에-배포하기"><a href="#S3에-배포하기" class="headerlink" title="S3에 배포하기"></a>S3에 배포하기</h3><ol><li>executor 설정</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depoly-S3:</span></span><br><span class="line"><span class="attr">executor:</span> <span class="string">aws-cli/default</span></span><br></pre></td></tr></table></figure><ul><li>executor: 실행할 CLI 환경을 불러온다. 여기에서는 AWS CLI를 사용하기 위해 aws-cli/default를 불러왔다.</li></ul><ol start="2"><li>빌드했던 디렉토리 가져오기</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">attach_workspace:</span> <span class="comment"># 빌드를 수행한 디렉토리를 가져오기</span></span><br><span class="line">    <span class="attr">at:</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><ul><li>attach_workspace: 이전에 저장했던 디렉토리를 가져온다. at 에 경로를 지정하여 가져올 수 있다.</li></ul><ol start="3"><li>aws-s3/sync</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">aws-s3/sync:</span></span><br><span class="line">  <span class="attr">arguments:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  --delete \\</span></span><br><span class="line"><span class="string">  --cache-control &quot;max-age=86400&quot;</span></span><br><span class="line"><span class="string">  aws-access-key-id: AWS_ACCESS_KEY_ID</span></span><br><span class="line"><span class="string">  aws-region: AWS_REGION</span></span><br><span class="line"><span class="string">  aws-secret-access-key: AWS_SECRET_ACCESS_KEY</span></span><br><span class="line"><span class="string">  from: &quot;dist&quot;</span></span><br><span class="line"><span class="string">  to: &quot;s3://allcobootcamp.com&quot;</span></span><br></pre></td></tr></table></figure><ul><li>aws-s3/sync : S3 버킷 안의 디렉토리와 현재 작업 위치의 디렉토리 구조를 맞추는 작업, 없는 디렉토리가 있다면 생성한다.<ul><li>arguments: S3 sync 명령어 세부 설정 (설정 정보 참고)<ul><li>delete: 현재 디렉토리에는 없지만 S3 디렉토리에는 있는 파일은 동기화 중 삭제처리</li><li>cache-control: 브라우저의 캐시 정책을 설정한다. max-age=N N초의 동안 캐싱하여 설정된 시간 동안에는 서버에 있는 데이터를 가져오지 않고 로컬에 있는 데이터를 사용한다.</li></ul></li><li>from: 빌드한 현재 소스의 위치</li><li>to: 업데이트하려는 S3 버킷의 위치</li></ul></li><li>aws-s3 CLI를 사용하려면 해당되는 S3의 정보를 설정해야한다. S3에 접근하기 위해서는 aws-access-key-id, aws-region, aws-secret-access-key가 필요하다. 이는 민감한 정보이기 때문에 별도의 환경 변수로 설정하여 관리하는게 보안상 좋다. 환경 변수를 설정하려면 다음과 같이 하면 된다.</li></ul><p><img src="/image/circle-005.png" alt=""></p><p>환경 변수를 설정할 프로젝트의 <code>Project Settings</code>에 들어간다.</p><p><img src="/image/circle-006.png" alt=""></p><p>Environment Variables에서 Add Environment Variable 버튼을 누르면 환경 변수를 추가할 수 있다.</p><p><img src="/image/circle-007.png" alt=""></p><p>환경 변수를 추가한다.</p><ol start="4"><li>aws-s3/copy</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">aws-s3/copy:</span></span><br><span class="line">  <span class="attr">arguments:</span> <span class="string">&#x27;--dryrun&#x27;</span></span><br><span class="line">  <span class="attr">from:</span> <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">  <span class="attr">to:</span> <span class="string">&#x27;s3://allcobootcamp.com&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>aws-s3/copy: S3 버킷에 현재 소스를 업데이트한다.<ul><li>arguments: S3 copy 명령어 세부 설정 (설정 정보 참고)<ul><li>dryrun: 실제로 실행하지 않고 지정된 명령을 사용하여 수행할 작업을 표시합니다.</li></ul></li><li>from: 빌드한 현재 소스의 위치</li><li>to: 업데이트하려는 S3 버킷의 위치</li></ul></li></ul><h2 id="전체-설정-정보"><a href="#전체-설정-정보" class="headerlink" title="전체 설정 정보"></a>전체 설정 정보</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">aws-cli:</span> <span class="string">circleci/aws-cli@2.0.6</span></span><br><span class="line">  <span class="attr">aws-s3:</span> <span class="string">circleci/aws-s3@3.0</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">~/repo</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cimg/node:14.18</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">          <span class="attr">keys:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;yarn.lock&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">v1-dependencies-</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">install</span> <span class="string">dependencies</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;yarn.lock&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">build:production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">persist_to_workspace:</span> <span class="comment"># 빌드한 현재 작업 디렉토리 저장</span></span><br><span class="line">          <span class="attr">root:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">depoly-S3:</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">aws-cli/default</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">attach_workspace:</span> <span class="comment"># 빌드를 수행한 디렉토리를 가져온다.</span></span><br><span class="line">          <span class="attr">at:</span> <span class="string">.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">aws-s3/sync:</span></span><br><span class="line">          <span class="attr">arguments:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            --delete \</span></span><br><span class="line"><span class="string">            --cache-control &quot;max-age=86400&quot;</span></span><br><span class="line"><span class="string"></span>          <span class="attr">aws-access-key-id:</span> <span class="string">AWS_ACCESS_KEY_ID</span></span><br><span class="line">          <span class="attr">aws-region:</span> <span class="string">AWS_REGION</span></span><br><span class="line">          <span class="attr">aws-secret-access-key:</span> <span class="string">AWS_SECRET_ACCESS_KEY</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">&#x27;s3://allcobootcamp.com&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">aws-s3/copy:</span></span><br><span class="line">          <span class="attr">arguments:</span> <span class="string">&#x27;--dryrun&#x27;</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">&#x27;s3://allcobootcamp.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build_and_deploy:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">build:</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">tags:</span></span><br><span class="line">              <span class="attr">only:</span> <span class="string">/v(\d+)\.[0-9]\.[0-9]$/</span> <span class="comment"># 버전 정규식 v1.0.0의 형태</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span> <span class="string">/.*/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">depoly-S3:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">tags:</span></span><br><span class="line">              <span class="attr">only:</span> <span class="string">/v(\d+)\.[0-9]\.[0-9]$/</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span> <span class="string">/.*/</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2022/02/16/circleci-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github Actions</title>
      <link>https://daphne-dev.github.io/2021/06/16/github-action-001/</link>
      <guid>https://daphne-dev.github.io/2021/06/16/github-action-001/</guid>
      <pubDate>Wed, 16 Jun 2021 06:30:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/github-actions-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Github-Actions란&quot;&gt;&lt;a href=&quot;#Github-Actions란&quot; class=&quot;headerlink&quot; title=&quot;Github Actions란?&quot;&gt;&lt;/a&gt;Github Actions란?&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;는 &lt;code&gt;Github&lt;/code&gt; 저장소를 기반으로 소프트웨어 개발 &lt;code&gt;Workflows&lt;/code&gt;를 자동화 할 수 있는 도구입니다. &lt;code&gt;CI/CD&lt;/code&gt;를 포함해 여러 작업들을 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;여기서 말하는 &lt;code&gt;CI&lt;/code&gt;는 테스트와 빌드를 자동으로 할 수 있다는 의미이며 &lt;code&gt;CD&lt;/code&gt;는 서버에 배포를 자동으로 할 수 있다는 의미입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;Github Actions 공식 문서&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Github-Actions-장점&quot;&gt;&lt;a href=&quot;#Github-Actions-장점&quot; class=&quot;headerlink&quot; title=&quot;Github Actions 장점&quot;&gt;&lt;/a&gt;Github Actions 장점&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Github&lt;/code&gt; 저장소에 함께 포함되어 있기 때문에 &lt;code&gt;CI&lt;/code&gt;를 위한 서버가 따로 필요없다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YAML&lt;/code&gt; 파일만으로도 설정이 가능하기 때문에 간편하고 쉽다.&lt;/li&gt;
&lt;li&gt;다른 사람들이 만든 여러 &lt;code&gt;Workflow&lt;/code&gt;들을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/github-actions-001.png" alt=""></p><h2 id="Github-Actions란"><a href="#Github-Actions란" class="headerlink" title="Github Actions란?"></a>Github Actions란?</h2><p><a href="https://github.com/features/actions">Github Actions</a>는 <code>Github</code> 저장소를 기반으로 소프트웨어 개발 <code>Workflows</code>를 자동화 할 수 있는 도구입니다. <code>CI/CD</code>를 포함해 여러 작업들을 수행할 수 있습니다.</p><p>여기서 말하는 <code>CI</code>는 테스트와 빌드를 자동으로 할 수 있다는 의미이며 <code>CD</code>는 서버에 배포를 자동으로 할 수 있다는 의미입니다.</p><p><a href="https://docs.github.com/en/actions">Github Actions 공식 문서</a></p><h2 id="Github-Actions-장점"><a href="#Github-Actions-장점" class="headerlink" title="Github Actions 장점"></a>Github Actions 장점</h2><ul><li><code>Github</code> 저장소에 함께 포함되어 있기 때문에 <code>CI</code>를 위한 서버가 따로 필요없다.</li><li><code>YAML</code> 파일만으로도 설정이 가능하기 때문에 간편하고 쉽다.</li><li>다른 사람들이 만든 여러 <code>Workflow</code>들을 사용할 수 있다.</li></ul><span id="more"></span><h2 id="다른-CI-CD-도구와의-차이점"><a href="#다른-CI-CD-도구와의-차이점" class="headerlink" title="다른 CI/CD 도구와의 차이점"></a>다른 CI/CD 도구와의 차이점</h2><p>주로 많이 쓰이는 <code>CI/CD</code> 도구로는 <code>Jenkins</code>가 있는데 이와 비교해보면 <code>Jenkins</code>는 별도의 서버를 구축해야하기 때문에 상대적으로 초기 구축 과정이 힘들지만 구축만 해놓으면 서버 운영 비용을 제외하면 비용이 무료입니다.</p><p><code>Github Actions</code>는 별도의 서버가 필요하지 않지만 private 저장소를 이용할 경우 과금이 발생할 수 있습니다.</p><h2 id="사용-한도"><a href="#사용-한도" class="headerlink" title="사용 한도"></a>사용 한도</h2><ul><li><code>Workflow</code>는 저장소 하나당 최대 20개까지 등록 가능</li><li><code>Workflow</code> 안에 존재하는 <code>Job</code> 단위 당 최대 6시간 동안 실행가능, 초과 시 자동으로 중지</li><li>public 저장소는 무료이며 private 저장소는 과금 발생</li><li><code>Github Free</code>는 한 달에 500MB 스토리지와 실행 시간 2,000분까지 제공</li><li><code>Github Pro</code>는 한 달에 1G 스토리지와 실행 시간 3,000분까지 제공<br>자세한 사용료는 다음 참고: <a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">Github Actions 사용료</a></li></ul><h2 id="Workflow-시작"><a href="#Workflow-시작" class="headerlink" title="Workflow 시작"></a>Workflow 시작</h2><p><code>Workflow</code>를 만들고자 하는 저장소의 <code>Actions</code>로 가서 만들 수 있다.<br>Github가 해당 저장소를 분석해서 적절히 제공하는 <code>Workflow</code> 템플릿를 이용하거나 다른 사용자들이 만들어서 Github 마켓플레이스에 공유한 것을 가져와서 쓰는 방법이 있다. 직접 <code>Workflow</code>를 만들 수 도 있다.</p><h2 id="YAML-파일-구성"><a href="#YAML-파일-구성" class="headerlink" title="YAML 파일 구성"></a>YAML 파일 구성</h2><p>다음은 yml 파일 예시이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">push:</span></span><br><span class="line">      <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">    <span class="attr">pull_request:</span></span><br><span class="line">      <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo Add other actions to build,</span></span><br><span class="line"><span class="string">          echo test, and deploy your project.</span></span><br></pre></td></tr></table></figure><ul><li>name: Workflow 이름 지정</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br></pre></td></tr></table></figure><ul><li>on: 해당 Workflow가 어떤 이벤트에 대해서 실행할 건지 지정할 수 있다. push나 pull_request 같은 이벤트와 crontab 같은 반복 스케줄도 사용할 수 있다.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br></pre></td></tr></table></figure><ul><li>jobs</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo Add other actions to build,</span></span><br><span class="line"><span class="string">          echo test, and deploy your project.</span></span><br></pre></td></tr></table></figure><ul><li>하나의 Workflow는 다양한 Job으로 구성됩니다.</li><li>여러 Job이 있을 경우, 병렬로 실행됩니다.</li><li>build 밑으로 작업 OS를 설정하고 여러 steps을 차례로 진행시키는 구조입니다.</li><li>이미 만들어진 액션을 <code>uses</code>에 등록해서 사용할 수 있습니다.<br>자세한 설정 방법은 <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">여기</a>를 참고하면 좋습니다.</li></ul><h2 id="간단한-테스트-자동화-예시"><a href="#간단한-테스트-자동화-예시" class="headerlink" title="간단한 테스트 자동화 예시"></a>간단한 테스트 자동화 예시</h2><p><code>Github Action</code>을 이용하여 간단하게 <code>NestJS</code> 테스트를 자동화하는 예시입니다.</p><ol><li><p><code>NestJS</code>로 프로젝트 생성 후 Github 저장소에 올리기<br><img src="/image/github-actions-002.png" alt=""></p></li><li><p><code>Actions</code>로 들어가서 워크플로우를 직접 생성하기<br><img src="/image/github-actions-003.png" alt=""></p></li><li><p><code>YAML</code> 파일 작성하기</p></li></ol><h3 id="Workflow-이름-및-트리거-지정"><a href="#Workflow-이름-및-트리거-지정" class="headerlink" title="Workflow 이름 및 트리거 지정"></a>Workflow 이름 및 트리거 지정</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">PR일</span> <span class="string">때만</span> <span class="string">테스트</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span> <span class="comment"># test라는 브랜치에 PR 올릴 시 동작</span></span><br></pre></td></tr></table></figure><p><code>name</code>으로 <code>Workflow</code> 이름을 정하고 <code>Workflow</code>를 실행할 트리거를 지정한다.<br>위의 경우 test라는 브랜치에 PR을 올릴 경우에만 동작하게 된다.</p><h3 id="Job-이름-amp-OS-환경-지정하기"><a href="#Job-이름-amp-OS-환경-지정하기" class="headerlink" title="Job 이름 &amp; OS 환경 지정하기"></a>Job 이름 &amp; OS 환경 지정하기</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br></pre></td></tr></table></figure><p><code>job</code>이름을 <code>build-test</code>로 지정해준다. 나중에 해당 이름이 쓰이므로 기억해두자.<br><code>runs-on</code>을 통해 OS환경을 지정한다.<br><code>ubuntu-latest</code> OS환경에서 <code>job</code>이 동작하게 된다.</p><h3 id="Node-설치하기"><a href="#Node-설치하기" class="headerlink" title="Node 설치하기"></a>Node 설치하기</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">node-version:</span> <span class="string">&#x27;14.x&#x27;</span></span><br></pre></td></tr></table></figure><p><code>actions/checkout@v2</code>를 사용해 Github 저장소에 있는 코드들을 가져옵니다.<br><code>actions/setup-node@v1</code>을 사용해 <code>node</code>를 설치합니다. 버전은 <code>14.x</code>입니다.</p><h3 id="npm-설치-및-테스트-실행하기"><a href="#npm-설치-및-테스트-실행하기" class="headerlink" title="npm 설치 및 테스트 실행하기"></a>npm 설치 및 테스트 실행하기</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">start</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test:cov</span></span><br></pre></td></tr></table></figure><p>npm 설치 후 NestJS 프로젝트 <code>package.json</code>에 설정되어 있는 <code>npm run test:cov</code> 명령어를 통해 테스트를 실행합니다.</p><h3 id="If-테스트-실패-시"><a href="#If-테스트-실패-시" class="headerlink" title="If 테스트 실패 시"></a>If 테스트 실패 시</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">if</span> <span class="string">fail</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/github-script@v4.0.2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github-token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      const ref = &quot;$&#123;&#123;github.ref&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">      const pull_number = Number(ref.split(&quot;/&quot;)[2])</span></span><br><span class="line"><span class="string">      await github.pulls.createReview(&#123;</span></span><br><span class="line"><span class="string">        ...context.repo,</span></span><br><span class="line"><span class="string">        pull_number,</span></span><br><span class="line"><span class="string">        body:&quot;테스트코드를 다시 확인해주세요.&quot;,</span></span><br><span class="line"><span class="string">        event: &quot;REQUEST_CHANGES&quot;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      await github.pulls.update(&#123;</span></span><br><span class="line"><span class="string">        ...context.repo,</span></span><br><span class="line"><span class="string">        pull_number,</span></span><br><span class="line"><span class="string">        state: &quot;closed&quot;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string"></span>  <span class="attr">if:</span> <span class="string">failure()</span> <span class="comment"># 해당 명령어를 추가하면 이전 step에서 실패 했을 경우에만 이 step이 동작하게 됨</span></span><br></pre></td></tr></table></figure><p>만약 위의 테스트가 실패하였을 경우 해당 <code>step</code>이 실행되게 됩니다.<br><code>actions/github-script</code>는 <code>Github actions</code>를 javascript 코드를 통해 제어할 수 있는 액션 툴 입니다.<br>필요한 파라미터 값인 <code>github-token</code>은 위와 같이 고정하면 기본적으로 현재 저장소에 지정되어 있는 저장소 bot용 github-token이 지정되게 됩니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">ref</span> <span class="string">=</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;github.ref&#125;&#125;</span>&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">const</span> <span class="string">pull_number</span> <span class="string">=</span> <span class="string">Number(ref.split(&quot;/&quot;)[2]);</span></span><br></pre></td></tr></table></figure><p><code>pull request number</code> 가져오기</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">await</span> <span class="string">github.pulls.createReview(&#123;</span></span><br><span class="line"><span class="string">...context.repo,</span></span><br><span class="line"><span class="string">pull_number,</span></span><br><span class="line"><span class="attr">body:</span> <span class="string">&quot;테스트코드를 다시 확인해주세요.&quot;</span><span class="string">,</span></span><br><span class="line"><span class="attr">event:</span> <span class="string">&quot;REQUEST_CHANGES&quot;</span><span class="string">,</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>리뷰 생성하기<br><code>테스트코드를 다시 확인해주세요.</code> 라는 메시지가 자동으로 생성됩니다.</p><p><img src="/image/github-actions-004.png" alt=""></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">await</span> <span class="string">github.pulls.update(&#123;</span></span><br><span class="line">  <span class="string">...context.repo,</span></span><br><span class="line">  <span class="string">pull_number,</span></span><br><span class="line">  <span class="attr">state:</span> <span class="string">&quot;closed&quot;</span><span class="string">,</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>merge 못하도록 Closed 하기</p><h3 id="전체-코드"><a href="#전체-코드" class="headerlink" title="전체 코드"></a>전체 코드</h3><p>아래는 전체 실행 코드입니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">PR일</span> <span class="string">때만</span> <span class="string">테스트</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span> <span class="comment"># test라는 브랜치에만 PR 올릴 시 동작</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;14.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">start</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test:cov</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">if</span> <span class="string">fail</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/github-script@v4.0.2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github-token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            const ref = &quot;$&#123;&#123;github.ref&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">            const pull_number = Number(ref.split(&quot;/&quot;)[2])</span></span><br><span class="line"><span class="string">            await github.pulls.createReview(&#123;</span></span><br><span class="line"><span class="string">              ...context.repo,</span></span><br><span class="line"><span class="string">              pull_number,</span></span><br><span class="line"><span class="string">              body:&quot;테스트코드를 다시 확인해주세요.&quot;,</span></span><br><span class="line"><span class="string">              event: &quot;REQUEST_CHANGES&quot;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">            await github.pulls.update(&#123;</span></span><br><span class="line"><span class="string">              ...context.repo,</span></span><br><span class="line"><span class="string">              pull_number,</span></span><br><span class="line"><span class="string">              state: &quot;closed&quot;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string"></span>        <span class="attr">if:</span> <span class="string">failure()</span> <span class="comment"># 해당 명령어를 추가하면 이전 step에서 실패 했을 경우에만 이 step이 동작하게 됨</span></span><br></pre></td></tr></table></figure><p>merge closed를 하기 위해 branch rule 설정하기</p><p>Settings에 Branches에서 방금 설정했던 job이름인 <code>build-test</code>를 설정한다.</p><p>여기까지 했다면 <code>test</code> 브랜치에 PR을 할 때마다 <code>Github actions</code>가 동작하고 만약 테스트 코드가 실패할 경우 <strong><code>테스트코드를 다시 확인해주세요.</code></strong>라는 메시지가 표시되며 merge를 못하도록 PR이 closed 될 것이다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/06/16/github-action-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Clean Code 리뷰 1 ~ 2장</title>
      <link>https://daphne-dev.github.io/2021/04/19/clean-code-001/</link>
      <guid>https://daphne-dev.github.io/2021/04/19/clean-code-001/</guid>
      <pubDate>Mon, 19 Apr 2021 08:20:50 GMT</pubDate>
      <description>
      
        &lt;div align=center&gt;

&lt;p&gt;&lt;img src=&quot;/image/clean-code-001.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;의도를-분명히-밝히는-변수-이름을-사용하세요&quot;&gt;&lt;a href=&quot;#의도를-분명히-밝히는-변수-이름을-사용하세요&quot; class=&quot;headerlink&quot; title=&quot;의도를 분명히 밝히는 변수 이름을 사용하세요&quot;&gt;&lt;/a&gt;의도를 분명히 밝히는 변수 이름을 사용하세요&lt;/h2&gt;&lt;p&gt;변수의 존재 이유, 기능, 사용법 등이 변수/함수/클래스 명에 드러나야 합니다. 따로 주석이 필요하지 않을 정도로 말이죠. 코드를 읽는 이가 사전 지식을 가지고 있다고 가정하고 변수 이름을 지으면 안됩니다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div align=center><p><img src="/image/clean-code-001.jpeg" alt=""></p></div><h2 id="의도를-분명히-밝히는-변수-이름을-사용하세요"><a href="#의도를-분명히-밝히는-변수-이름을-사용하세요" class="headerlink" title="의도를 분명히 밝히는 변수 이름을 사용하세요"></a>의도를 분명히 밝히는 변수 이름을 사용하세요</h2><p>변수의 존재 이유, 기능, 사용법 등이 변수/함수/클래스 명에 드러나야 합니다. 따로 주석이 필요하지 않을 정도로 말이죠. 코드를 읽는 이가 사전 지식을 가지고 있다고 가정하고 변수 이름을 지으면 안됩니다.</p><span id="more"></span><h3 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d; <span class="comment">// 경과 시간(단위: 날짜)</span></span><br></pre></td></tr></table></figure><h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">elapsedTimeInDays</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">daysSinceCreation</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">daysSinceModification</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fileAgeInDays</span>: <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h3 id="Bad-1"><a href="#Bad-1" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getThem</span>(<span class="params"></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">list1</span>: <span class="built_in">number</span>[][] = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> theList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] === <span class="number">4</span>) &#123;</span><br><span class="line">      list1.<span class="title function_">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Good-1"><a href="#Good-1" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFlaggedCells</span>(<span class="params"></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">flaggedCells</span>: <span class="built_in">number</span>[][] = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> cell <span class="keyword">of</span> gameBoard) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cell[<span class="variable constant_">STATUS_VALUE</span>] === <span class="variable constant_">FLAGGED</span>) &#123;</span><br><span class="line">      flaggedCells.<span class="title function_">push</span>(cell);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="의미-있게-변수-이름을-구분하세요"><a href="#의미-있게-변수-이름을-구분하세요" class="headerlink" title="의미 있게 변수 이름을 구분하세요"></a>의미 있게 변수 이름을 구분하세요</h2><p>아래와 같이 명명하면 어떤 함수를 호출할지 알 수 없게 됩니다. 읽는 사람이 차이를 알도록 이름을 지어야 합니다.</p><h3 id="Bad-2"><a href="#Bad-2" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"></span>): <span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserDetails</span>(<span class="params"></span>): <span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserData</span>(<span class="params"></span>): <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure><h3 id="Good-2"><a href="#Good-2" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>): <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure><h2 id="발음할-수-있는-변수-이름을-사용하세요"><a href="#발음할-수-있는-변수-이름을-사용하세요" class="headerlink" title="발음할 수 있는 변수 이름을 사용하세요"></a>발음할 수 있는 변수 이름을 사용하세요</h2><p>발음하기 쉬운 이름으로 변수 이름을 지어야 합니다. 발음하기 어려운 이름으로 지으면 커뮤니케이션 하기도 어려워집니다.</p><h3 id="Bad-3"><a href="#Bad-3" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Dtarcrd102</span> = &#123;</span><br><span class="line">  <span class="attr">genymdhms</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">modymdhms</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">pszqint</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Good-3"><a href="#Good-3" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Customer</span> = &#123;</span><br><span class="line">  <span class="attr">generationTimestamp</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">modificationTimestamp</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">recordId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="검색하기-쉬운-이름을-사용하세요"><a href="#검색하기-쉬운-이름을-사용하세요" class="headerlink" title="검색하기 쉬운 이름을 사용하세요"></a>검색하기 쉬운 이름을 사용하세요</h2><p>상수와 같은 경우 숫자 그대로 표현하면 검색하기 힘들어집니다. 예를 들어 <code>MILLISECONDS_IN_A_DAY</code>는 검색으로 찾기 쉽지만 단순히 <code>숫자 86400000</code>로 나타낸다면 읽는 사람으로 하여금 어떤 의미를 가지는지 알 수 없게 됩니다.</p><h3 id="Bad-4"><a href="#Bad-4" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(restart, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure><h3 id="Good-4"><a href="#Good-4" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MILLISECONDS_IN_A_DAY</span> = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, <span class="variable constant_">MILLISECONDS_IN_A_DAY</span>);</span><br></pre></td></tr></table></figure><h2 id="인코딩을-피하세요-변수에-부가-정보를-덧붙여-표기하는-것을-뜻함"><a href="#인코딩을-피하세요-변수에-부가-정보를-덧붙여-표기하는-것을-뜻함" class="headerlink" title="인코딩을 피하세요(변수에 부가 정보를 덧붙여 표기하는 것을 뜻함)"></a>인코딩을 피하세요(변수에 부가 정보를 덧붙여 표기하는 것을 뜻함)</h2><ul><li>변수 명에 해당 변수의 타입(string, number 등)을 적지 마세요</li><li>변수의 종류를 구분하는 접두어를 붙이지 마세요(각각의 변수들을 다른 색상으로 표시하거나 눈에 띄게 보여주는 IDE를 사용하는 것이 맞습니다)</li></ul><h3 id="인코딩-예외"><a href="#인코딩-예외" class="headerlink" title="인코딩 예외"></a>인코딩 예외</h3><ul><li>인터페이스 이름을 지을 때 <code>IShapeFactory</code>와 같이 인터페이스를 뜻하는 <code>I</code>를 붙이지 마세요. 해당 인터페이스를 사용하는 구현 클래스에 <code>ShapeFactoryImp</code>와 같이 인코딩 하세요.</li></ul><h2 id="암시적인-이름은-사용하지-마세요"><a href="#암시적인-이름은-사용하지-마세요" class="headerlink" title="암시적인 이름은 사용하지 마세요"></a>암시적인 이름은 사용하지 마세요</h2><p>자신의 기억력을 과시하지 마세요.<br>자신만이 아는 단어나 기발한 이름을 쓰지 마세요.<br>명시적인 것이 암시적인 것보다 좋습니다.<br>명료함이 최고입니다.</p><h3 id="Bad-5"><a href="#Bad-5" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> u = <span class="title function_">getUser</span>();</span><br><span class="line"><span class="keyword">const</span> s = <span class="title function_">getSubscription</span>();</span><br><span class="line"><span class="keyword">const</span> t = <span class="title function_">charge</span>(u, s);</span><br></pre></td></tr></table></figure><h3 id="Good-5"><a href="#Good-5" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">getUser</span>();</span><br><span class="line"><span class="keyword">const</span> subscription = <span class="title function_">getSubscription</span>();</span><br><span class="line"><span class="keyword">const</span> transaction = <span class="title function_">charge</span>(user, subscription);</span><br></pre></td></tr></table></figure><h2 id="클래스-이름"><a href="#클래스-이름" class="headerlink" title="클래스 이름"></a>클래스 이름</h2><ul><li>명사 혹은 명사구를 사용하세요(Customer, WikiPage, Account, AddressParser 등)</li><li>Manager, Processor, Data, Info와 같은 단어를 피하세요</li><li>동사를 사용하지 마세요</li></ul><h2 id="메서드-이름"><a href="#메서드-이름" class="headerlink" title="메서드 이름"></a>메서드 이름</h2><ul><li>동사 혹은 동사구를 사용하세요(postPayment, deletePayment, deletePage, save 등)</li><li>접근자, 변경자, 조건자는 get, set, is로 시작하세요</li></ul><h3 id="Good-6"><a href="#Good-6" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">name</span>: <span class="built_in">string</span> = employee.<span class="title function_">getName</span>();</span><br><span class="line">customer.<span class="title function_">setName</span>(<span class="string">&quot;mike&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (paycheck.<span class="title function_">isPosted</span>())...</span><br></pre></td></tr></table></figure><h2 id="불필요한-문맥은-추가하지-마세요"><a href="#불필요한-문맥은-추가하지-마세요" class="headerlink" title="불필요한 문맥은 추가하지 마세요"></a>불필요한 문맥은 추가하지 마세요</h2><p>클래스/타입/객체에 이름에 의미가 담겨 있다면, 변수 이름에서 반복하지 마세요</p><h3 id="Bad-6"><a href="#Bad-6" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">  <span class="attr">carMake</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">carModel</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">carColor</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">car: Car</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;car.carMake&#125;</span> <span class="subst">$&#123;car.carModel&#125;</span> <span class="subst">$&#123;car.carColor&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Good-7"><a href="#Good-7" class="headerlink" title="Good"></a>Good</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">car: Car</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;car.make&#125;</span> <span class="subst">$&#123;car.model&#125;</span> <span class="subst">$&#123;car.color&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[참고 문헌]</p><p><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=34083680">Clean Code</a><br><a href="https://738.github.io/clean-code-typescript/">clean-code-typescript</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/04/19/clean-code-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 개인 계정 &amp; 회사 계정 따로 관리하기</title>
      <link>https://daphne-dev.github.io/2021/04/15/git-config-file/</link>
      <guid>https://daphne-dev.github.io/2021/04/15/git-config-file/</guid>
      <pubDate>Thu, 15 Apr 2021 08:56:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/github-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git-config-수정의-번거로움&quot;&gt;&lt;a href=&quot;#Git-config-수정의-번거로움&quot; class=&quot;headerlink&quot; title=&quot;Git config 수정의 번거로움&quot;&gt;&lt;/a&gt;Git config 수정의 번거로움&lt;/h2&gt;&lt;p&gt;이전에 개인 깃헙 계정으로만 깃을 쓸 때는 몰랐는데 회사 깃헙 계정도 같이 쓰게 되니 매번 &lt;code&gt;push&lt;/code&gt; 할 때마다 &lt;code&gt;git config&lt;/code&gt;를 수정해야 하는 것이 너무 귀찮고 번거로웠다. 어떻게 방법이 없을까 하고 생각만 하다가 이번에 방법을 찾아내서 적용해보았다. 잊지 않기 위해 기록해둔다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/github-001.png" alt=""></p><h2 id="Git-config-수정의-번거로움"><a href="#Git-config-수정의-번거로움" class="headerlink" title="Git config 수정의 번거로움"></a>Git config 수정의 번거로움</h2><p>이전에 개인 깃헙 계정으로만 깃을 쓸 때는 몰랐는데 회사 깃헙 계정도 같이 쓰게 되니 매번 <code>push</code> 할 때마다 <code>git config</code>를 수정해야 하는 것이 너무 귀찮고 번거로웠다. 어떻게 방법이 없을까 하고 생각만 하다가 이번에 방법을 찾아내서 적용해보았다. 잊지 않기 위해 기록해둔다.</p><span id="more"></span><h2 id="1-SSH-키-분리"><a href="#1-SSH-키-분리" class="headerlink" title="1. SSH 키 분리"></a>1. SSH 키 분리</h2><p>터미널을 켜고, 홈 디렉토리로 이동</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p><code>.ssh</code> 디렉토리 생성 후 chmod로 권한 설정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line">$ <span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line">$ <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure><p><code>your email</code>에 깃헙 메일 주소를 입력한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>개인용과 회사용 두 개의 key를 만들어야 하는데<br><code>Enter file in which to save the key (/Users/daphne/.ssh/id_rsa):</code> 뒤에 개인용으로 <code>id_rsa</code> 회사용으로 <code>id_rsa_work</code>를 입력하여 비밀번호를 입력 후 각각 생성해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/daphne/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>키 생성이 정상적으로 되었다면 <code>ls -l</code>을 사용하면 확인이 가능하다.<br>아래 명령어를 입력해 생성한 공개 키를 복사해서 깃헙에 등록하자.<br>ssh-rsa 부터 your email 부분까지 모두 복사한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/`id_rsa.pub`</span><br><span class="line">ssh-rsa</span><br><span class="line">~~~</span><br><span class="line">your email</span><br></pre></td></tr></table></figure><p>이제 github로 가서</p><p><img src="/image/git-config-file-001.png" alt=""></p><p><code>Settings</code> 클릭</p><p><img src="/image/git-config-file-002.png" alt=""></p><p><code>SSH and GPG keys</code> 클릭</p><p><img src="/image/git-config-file-003.png" alt=""></p><p><code>New SSH key</code> 클릭</p><p><img src="/image/git-config-file-004.png" alt=""></p><p>개인용 SSH 키와 회사용 SSH 키를 <code>각각의 깃헙 계정에 등록</code>한다.</p><h2 id="2-gitconfig-amp-ssh-config-설정하기"><a href="#2-gitconfig-amp-ssh-config-설정하기" class="headerlink" title="2. .gitconfig &amp; .ssh/config 설정하기"></a>2. .gitconfig &amp; .ssh/config 설정하기</h2><p>vi 에디터를 이용해 <code>~/.ssh/config</code> 파일을 연다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p><code>HostName</code>은 깃헙에서 repo를 클론할때 SSH 주소 부분의 git@<code>github.com</code>에서 <code>github.com</code>을 의미한다.<br><code>IdentityFile</code> 뒤에 생성했던 key를 연결한다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># company</span></span><br><span class="line">Host github.com-work</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_work</span><br><span class="line"></span><br><span class="line"><span class="comment"># daphne</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>vi 에디터를 이용해 <code>.gitconfig</code>을 수정한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p><code>[user]</code> 부분에는 전역적으로 사용할 계정을 입력한다. 나는 전역적으로 사용할 계정으로 개인 계정을 입력했다.<br>회사용 작업 폴더를 만들어서 관리하고 싶었기에 <code>work</code>라는 폴더를 만들었다.<br><code>[includeIf &quot;gitdir:~/work/&quot;]</code>에 아까 만든 폴더의 경로인 <code>work/</code>를 설정해 놓으면 해당 폴더 아래에서는 설정했던 SSH가 적용된다. 반드시 폴더명 뒤에 <code>/</code>를 붙여야한다.<br>마지막으로 <code>path</code> 부분에 아까 설정한 SSH의 <code>Host</code>를 입력하면 된다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">name</span> = your github name</span><br><span class="line"><span class="attr">email</span> = your email</span><br><span class="line"><span class="section">[includeIf &quot;gitdir:~/work/&quot;]</span></span><br><span class="line"><span class="attr">path</span> = .gitconfig-work</span><br></pre></td></tr></table></figure><p>이제 설정이 모두 끝났다.</p><h2 id="3-git-clone-하기"><a href="#3-git-clone-하기" class="headerlink" title="3. git clone 하기"></a>3. git clone 하기</h2><p>이제 git clone을 통해 받을 때 <code>.ssh/config</code>에서 설정한 Host를 이용한다.</p><p>개인 계정으로 받을 때</p><blockquote><p>git clone git@<code>github.com</code>/repository_name.git으로 받는다.</p></blockquote><p>회사 계정으로 받을 때</p><blockquote><p>git clone git@<code>github-luna.com</code>/repository_name.git으로 받는다.</p></blockquote><p>이제 <code>work</code> 폴더 아래의 폴더에서 <code>git config user.name</code>이나 <code>git config user.email</code>을 입력해보면 설정했던 회사용 깃헙 계정의 정보가 나올 것이고 <code>work</code> 폴더 밖에서 받은 것은 개인용 깃헙 계정 정보가 나올 것이다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/04/15/git-config-file/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NestJS 소개</title>
      <link>https://daphne-dev.github.io/2021/04/09/nest-001/</link>
      <guid>https://daphne-dev.github.io/2021/04/09/nest-001/</guid>
      <pubDate>Fri, 09 Apr 2021 08:26:53 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/nestjs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Nest-NestJS-란&quot;&gt;&lt;a href=&quot;#Nest-NestJS-란&quot; class=&quot;headerlink&quot; title=&quot;Nest(NestJS) 란 ?&quot;&gt;&lt;/a&gt;Nest(NestJS) 란 ?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nestjs.com/&quot;&gt;Nest&lt;/a&gt;는 &lt;code&gt;Node.js&lt;/code&gt; 서버 측 애플리케이션을 구축하기 위한 프레임 워크로 &lt;code&gt;TypeScript&lt;/code&gt;로 빌드되고 &lt;code&gt;OOP(Object Oriented Programming)&lt;/code&gt;, &lt;code&gt;FP(Functional Programming)&lt;/code&gt; 및 &lt;code&gt;FRP(Functional Reactive Programming)&lt;/code&gt;을 지원합니다.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/nestjs.png" alt=""></p><h2 id="Nest-NestJS-란"><a href="#Nest-NestJS-란" class="headerlink" title="Nest(NestJS) 란 ?"></a>Nest(NestJS) 란 ?</h2><blockquote><p><a href="https://nestjs.com/">Nest</a>는 <code>Node.js</code> 서버 측 애플리케이션을 구축하기 위한 프레임 워크로 <code>TypeScript</code>로 빌드되고 <code>OOP(Object Oriented Programming)</code>, <code>FP(Functional Programming)</code> 및 <code>FRP(Functional Reactive Programming)</code>을 지원합니다.</p></blockquote><span id="more"></span><h2 id="Nest의-장점"><a href="#Nest의-장점" class="headerlink" title="Nest의 장점"></a>Nest의 장점</h2><p>JavaScript 생태계에서 프론트엔드 측에서는 <code>Angular</code>, <code>React</code>, <code>Vue</code>와 같은 프레임 워크들이 생겨나면서 생산성이 증가하고 빠르게 구축이 가능하게 되었다. 하지만 백엔드 측에서는 <code>Node.js</code>를 비롯해 훌륭한 라이브러리나 도구 등이 많이 있지만 <code>아키텍처</code>에 대한 문제를 해결해주는 것이 없었다. <code>Node.js</code> 특성상 자유로운 개발로 인해 초기 시작할 때는 쉽고 빠르게 개발할 수 있지만 규모가 커지면 커질수록 테스트, 확장성 부분에서 문제가 발생하게 된다. 이를 해결하기 위해 <code>Nest</code>가 탄생하게 되었다.</p><p>Nest는 아키텍처에 대해 <code>Angular</code>에서 크게 영감을 받아 만들어졌으며 테스트가 용이하고 확장성이 좋은 프레임 워크이다. 또한 <code>TypeScript</code>를 적극 도입하여 안정적이다.</p><p>내부적으로 Nest는 <code>Express</code>를 사용하지만 <code>Fastify</code>와 같은 다양한 라이브러리와의 호환성을 제공해 수많은 외부 플러그인을 쉽게 사용할 수 있다.</p><h2 id="Nest-사용-후기"><a href="#Nest-사용-후기" class="headerlink" title="Nest 사용 후기"></a>Nest 사용 후기</h2><p><code>NestJS</code>는 단순히 CLI 명령어 만으로 프로젝트를 생성하고 컨트롤러, 서비스, 모듈 등을 쉽게 생성할 수 있다. <code>Jest</code>도 지원해주기 때문에 테스트도 용이하다. 웹개발에 필요한 요소들은 미리 다 준비되어있는 느낌이었고 비록 영어로 되어있지만 공식 문서를 찾아보면 어떻게 사용하는지 쉽게 알 수 있다.</p><p><code>NestJS</code>를 알기 전에는 <code>Node.js</code>로 바닥부터 시작해 구조를 잡고 필요한 것이 생길 때마다 추가하는 그런 방식으로 했었다. 매번 기능을 추가할 때마다 일일이 폴더 생성을 하는 불편함은 물론, 개발을 하면 할수록 코드가 복잡해지고 덕지덕지 붙여진 코드가 되어갔던 기억이 있는데, <code>NestJS</code> 없이는 이제 안될 것 같다. 만약 <code>Node.js</code>로 개발을 해본 경험이 있다면 빨리 써보는 것을 추천해본다. 국내 기업에서도 <code>NestJS</code>를 많이 사용하게 되었으면 좋겠다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/04/09/nest-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://daphne-dev.github.io/2021/04/07/docker-004/</link>
      <guid>https://daphne-dev.github.io/2021/04/07/docker-004/</guid>
      <pubDate>Tue, 06 Apr 2021 15:45:09 GMT</pubDate>
      <description>
      
        &lt;div align=center&gt;

&lt;p&gt;&lt;img src=&quot;/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose&quot;&gt;&lt;/a&gt;Docker Compose&lt;/h2&gt;&lt;p&gt;앞서 도커(Docker)가 무엇인지 도커 내에 어떤 기능들이 있는지 보았다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://daphne-dev.github.io/2021/03/23/docker-001/&quot;&gt;Docker의 기본&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://daphne-dev.github.io/2021/03/23/docker-002/&quot;&gt;Docker 설치와 명령어&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://daphne-dev.github.io/2021/04/06/docker-003/&quot;&gt;Docker 컨테이너 수명 &amp;amp; 지속적인 데이터&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이제 도커 CLI 명령어를 통해 이미지를 만들고 컨테이너를 띄우고 불륨에 영구적으로 데이터를 저장시킬 수 있게 되었으며 &lt;code&gt;DockerFile&lt;/code&gt;을 통해 파일 하나로 내 입맛대로 설정할 수 있게 되었다. 도커를 통해 내가 원하는 환경들을 쉽게 구성할 수 있게 된 것이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div align=center><p><img src="/image/docker.png" alt=""></p></div><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>앞서 도커(Docker)가 무엇인지 도커 내에 어떤 기능들이 있는지 보았다.</p><p><a href="https://daphne-dev.github.io/2021/03/23/docker-001/">Docker의 기본</a><br><a href="https://daphne-dev.github.io/2021/03/23/docker-002/">Docker 설치와 명령어</a><br><a href="https://daphne-dev.github.io/2021/04/06/docker-003/">Docker 컨테이너 수명 &amp; 지속적인 데이터</a></p><p>이제 도커 CLI 명령어를 통해 이미지를 만들고 컨테이너를 띄우고 불륨에 영구적으로 데이터를 저장시킬 수 있게 되었으며 <code>DockerFile</code>을 통해 파일 하나로 내 입맛대로 설정할 수 있게 되었다. 도커를 통해 내가 원하는 환경들을 쉽게 구성할 수 있게 된 것이다.</p><span id="more"></span><p>이제 이렇게 올린 컨테이너 안에 내가 만든 애플리케이션을 올린다고 생각해보자. 보통 하나의 애플리케이션에는 여러 개의 서비스로 이루어져 있는데, 이를 하나의 <code>YAML</code>파일에 정의하여 실행할 수 있도록 하는게 <code>Docker Compose</code>다.</p><p>compose는 보통 3가지의 단계로 이루어진 프로세스를 가진다.</p><ol><li><code>DockerFile</code>은 어디서나 환경을 구성할 수 있도록 앱의 환경을 정의한다.</li><li><code>Docker Compose</code>는 <code>DockerFile</code>로 만들어진 환경에서 함께 실행할 수 있도록 앱을 구성하는 서비스를 정의한다.</li><li><code>docker compose up</code> 명령을 하면 앞의 과정들이 실행되게 된다.</li></ol><h2 id="Docker-Compose-파일-구성하기"><a href="#Docker-Compose-파일-구성하기" class="headerlink" title="Docker Compose 파일 구성하기"></a>Docker Compose 파일 구성하기</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span> <span class="comment"># 버전 지정</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 서비스 정의</span></span><br><span class="line">  <span class="attr">servicename:</span> <span class="comment"># 서비스 이름 지정</span></span><br><span class="line">    <span class="attr">image:</span> <span class="comment"># 사용할 이미지</span></span><br><span class="line">    <span class="attr">command:</span> <span class="comment"># 컨테이너 안에서 작동하는 명령어 지정</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># docker run 명령어에서 -e 옵션과 같다.</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># docker run 명령어에서 -v 옵션과 같다.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">  <span class="attr">sevicename2:</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># docker volume create 명령어와 같다. 불륨을 정의한다.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># docker network create 명령어와 같다. 네트워크를 정의한다.</span></span><br></pre></td></tr></table></figure><p>도커 파일자체를 지정해서 빌드할 수 도 있다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">servicename:</span></span><br><span class="line">    <span class="attr">bulid:</span></span><br><span class="line">      <span class="attr">context:</span></span><br><span class="line">      <span class="attr">dockerfile:</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Compose-장점-및-사용사례"><a href="#Docker-Compose-장점-및-사용사례" class="headerlink" title="Docker Compose 장점 및 사용사례"></a>Docker Compose 장점 및 사용사례</h2><p>위와 같이 Docker Compose를 이용하면 개발 환경을 컨테이너화 하여 언제 어디에서든 Docker만 설치하면 해당 파일을 통해 어플리케이션을 띄우고 개발을 시작할 수 있게 되어 매우 편리해진다. 환경을 설정하는데 들이는 리소스들을 도커 하나로 해결할 수 있게 되며 이는 개발에 좀 더 집중할 수 있게 해준다. 또한 모두가 동일한 환경으로 세팅되는 것을 보장받기 때문에 개발 환경 차이로 인해 생기는 알 수 없는 미묘한 문제들을 사전에 방지할 수 있다.</p><p>또한 테스트를 할 때도 용이한데 compose 파일을 정의하여 자동화된 테스트 환경을 구성할 수 있다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/04/07/docker-004/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker Container lifetime &amp; Persistent Data</title>
      <link>https://daphne-dev.github.io/2021/04/06/docker-003/</link>
      <guid>https://daphne-dev.github.io/2021/04/06/docker-003/</guid>
      <pubDate>Tue, 06 Apr 2021 14:19:58 GMT</pubDate>
      <description>
      
        &lt;div align=center&gt;

&lt;p&gt;&lt;img src=&quot;/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;에서 컨테이너를 생성하고 컨테이너에 쓰여진 데이터들은 컨테이너를 삭제하면 기본적으로 같이 사라지게 된다. 기껏 생긴 데이터들이 없어진다는 것이다. 데이터를 영구히 보존시키기 위해 Docker에서는 두 가지의 방법을 제시하고 있다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div align=center><p><img src="/image/docker.png" alt=""></p></div><p><code>Docker</code>에서 컨테이너를 생성하고 컨테이너에 쓰여진 데이터들은 컨테이너를 삭제하면 기본적으로 같이 사라지게 된다. 기껏 생긴 데이터들이 없어진다는 것이다. 데이터를 영구히 보존시키기 위해 Docker에서는 두 가지의 방법을 제시하고 있다.</p><span id="more"></span><blockquote><p><code>Docker Volume</code>과 <code>bind mount</code>이다.</p></blockquote><h2 id="Docker-Volume"><a href="#Docker-Volume" class="headerlink" title="Docker Volume"></a>Docker Volume</h2><p><img src="/image/docker-types-of-mounts-volume.png" alt=""></p><p>불륨(volume)은 Docker 컨테이너에서 생성하고 사용하는 데이터를 유지하기 위한 방법 중 하나이다. 또다른 방법인 바인딩 마운트와 비교되는데 바인딩 마운트는<br>호스트 시스템의 디렉토리 구조와 OS에 따라 달라지지만 불륨은 이와 별개로 Docker에 의해 완전히 관리된다. Docker CLI 명령어를 통해 쉽게 생성이 가능하다.</p><h2 id="Volume의-장점"><a href="#Volume의-장점" class="headerlink" title="Volume의 장점"></a>Volume의 장점</h2><ul><li>불륨은 바인드 마운트에 비해 백업 또는 마이그레이션이 쉽다.</li><li>Docker CLI나 Docker API를 사용해 불륨을 관리할 수 있다.</li><li>불륨은 Linux 및 Windows 컨테이너에서 모두 작동한다.</li><li>여러 컨테이너 간에 불륨을 사용할 떄 보다 안전하게 공유가 가능하다.</li><li>CLI를 통해 불륨 드라이버를 사용하면 불륨의 세부적인 설정이 가능해지는데 원격 호스트 또는 클라우드 공급자에 불륨을 저장하고 불륨의 내용을 암호화하거나 다른 기능을 추가할 수 있다.</li><li>새 불륨은 컨테이너로 컨텐츠를 미리 채울 수 있다.</li><li>Docker Desktop의 불륨은 Mac 및 Windows 호스트의 바인드 마운트보다 훨씬 높은 성능을 제공한다.</li></ul><h2 id="Bind-Mount"><a href="#Bind-Mount" class="headerlink" title="Bind Mount"></a>Bind Mount</h2><p><img src="/image/docker-types-of-mounts-bind.png" alt=""></p><p>바인드 마운트를 사용하면 호스트의 파일 또는 디렉토리가 컨테이너에 마운트된다. 파일 또는 디렉토리는 호스트의 절대 경로로 참조된다. 이게 무슨 소리냐면 호스트 시스템, 예를 들어 Mac OS 환경의 시스템에서 <code>/test</code> 라는 파일 경로가 있다고 할 때 여기 안에 <code>test_file.txt</code> 라는 파일을 생성하고 해당 경로로 마운트를 했다고 하면 해당 컨테이너 터미널을 열어서 똑같은 경로로 들어가서 확인해보면 <code>test_file.txt</code>가 존재하는 것을 확인할 수 있다. 물론 그 반대도 가능하다.</p><h2 id="Volume-VS-Bind-Mount"><a href="#Volume-VS-Bind-Mount" class="headerlink" title="Volume VS Bind Mount"></a>Volume VS Bind Mount</h2><p><code>Volume</code>과 <code>Bind Mount</code>의 가장 큰 차이점은 Docker가 관리를 해주는가 안해주는가의 차이이다. 불륨을 사용하면 컨테이너나 이미지와 같이 Docker를 통해 관리를 할 수 있다는 장점이 있다. 때문에 대부분의 경우 불륨으로 생성해서 사용하지만 로컬에서 개발을 할 때 간혹 이런 특징을 이용해야할 때가 있는데 예를 들어 보통 개발을 하면 로컬에서 작업을 하게 되는데 만약 컨테이너로 올려서 확인해야한다면 코드를 수정할 때마다 매번 컨테이너로 올리는 불편함이 생길 것이다. 개발하는 작업 디렉토리를 바인드 마운트해주면 코드를 변경할 때마다 실시간으로 컨테이너에서도 확인이 가능해진다.</p><h2 id="번외-tmpfs-Mount"><a href="#번외-tmpfs-Mount" class="headerlink" title="번외 tmpfs Mount"></a>번외 tmpfs Mount</h2><p><img src="/image/docker-types-of-mounts-tmpfs.png" alt=""></p><p>앞서 말한 두 가지 옵션 외에 <code>Linux</code>에서만 사용 가능한 옵션이 하나 있는데, <code>tmpfs Mount</code>이다.<br><code>tmpfs Mount</code>는 영구히 저장되는 것이 아니라 임시적으로 호스트 메모리에서만 지속되고, 컨테이너를 내리면 <code>tmpfs Mount</code>가 제거되고 메모리에서 있었기 때문에 사라지게 된다.</p><p>일반적으로 거의 쓰이지않는 옵션이지만 호스트나 컨테이너에서 파일을 임시로 저장할 필요가 있을 때 유용할 수 있다.</p><h3 id="tmpfs-마운트의-한계"><a href="#tmpfs-마운트의-한계" class="headerlink" title="tmpfs 마운트의 한계"></a>tmpfs 마운트의 한계</h3><ul><li>불륨이나 바인드 마운트와 달리 컨테이너 간에 <code>tmpfs Mount</code>를 공유할 수 없다.</li><li>Linux에서 도커를 실행하는 경우에만 사용할 수 있다.</li></ul>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/04/06/docker-003/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker 설치와 명령어</title>
      <link>https://daphne-dev.github.io/2021/03/23/docker-002/</link>
      <guid>https://daphne-dev.github.io/2021/03/23/docker-002/</guid>
      <pubDate>Tue, 23 Mar 2021 12:32:32 GMT</pubDate>
      <description>
      
        &lt;div align=center&gt;

&lt;p&gt;&lt;img src=&quot;/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Docker-설치하기&quot;&gt;&lt;a href=&quot;#Docker-설치하기&quot; class=&quot;headerlink&quot; title=&quot;Docker 설치하기&quot;&gt;&lt;/a&gt;Docker 설치하기&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/image/docker-001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-mac&quot;&gt;도커 홈페이지&lt;/a&gt;에 접속하여 Get Docker를 클릭하면 쉽게 다운받아 설치할 수 있다.&lt;/p&gt;
&lt;p&gt;제대로 설치가 되었는지 확인하려면 터미널을 키고 &lt;code&gt;docker --version&lt;/code&gt;을 입력해보자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div align=center><p><img src="/image/docker.png" alt=""></p></div><h2 id="Docker-설치하기"><a href="#Docker-설치하기" class="headerlink" title="Docker 설치하기"></a>Docker 설치하기</h2><p><img src="/image/docker-001.png" alt=""></p><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac">도커 홈페이지</a>에 접속하여 Get Docker를 클릭하면 쉽게 다운받아 설치할 수 있다.</p><p>제대로 설치가 되었는지 확인하려면 터미널을 키고 <code>docker --version</code>을 입력해보자.</p><span id="more"></span><p><img src="/image/docker-003.png" alt=""></p><h3 id="Docker-편하게-사용하기"><a href="#Docker-편하게-사용하기" class="headerlink" title="Docker 편하게 사용하기"></a>Docker 편하게 사용하기</h3><p>Docker를 편하게 사용하기 위해 추가적인 설치를 해보자.<br>mac에서 zsh를 사용하고 있기 때문에 여기에 맞게 설치할 것이다.</p><p><a href="http://docs.docker.oeynet.com/compose/completion/">도커 command-line completion</a>을 참고했다.</p><p>아래 명령어 입력</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.zsh/completion</span><br><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.16.1/contrib/completion/zsh/_docker-compose &gt; ~/.zsh/completion/_docker-compose</span><br></pre></td></tr></table></figure><p>zsh 설정 파일을 편집기로 열기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>아래 명령어 추가</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  ...</span><br><span class="line">  docker</span><br><span class="line">  docker-compose</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fpath=(~/.zsh/completion <span class="variable">$fpath</span>)</span><br><span class="line"><span class="built_in">autoload</span> -Uz compinit &amp;&amp; compinit -i</span><br></pre></td></tr></table></figure><p>zsh 다시 시작</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> zsh</span><br></pre></td></tr></table></figure><p>제대로 설치되었다면 아래와 같이 탭을 누르면 사용할 수 있는 옵션들에 대해 설명이 표시되게 된다.</p><p><img src="/image/docker-004.png" alt=""></p><h2 id="Docker-명령어"><a href="#Docker-명령어" class="headerlink" title="Docker 명령어"></a>Docker 명령어</h2><h3 id="Docker-정보-조회"><a href="#Docker-정보-조회" class="headerlink" title="Docker 정보 조회"></a>Docker 정보 조회</h3><blockquote><p><code>docker info</code></p></blockquote><p>설치된 Docker에 대해 자세히 알고 싶을 때 사용하는 명령어이다.</p><h3 id="컨테이너-목록을-확인하기"><a href="#컨테이너-목록을-확인하기" class="headerlink" title="컨테이너 목록을 확인하기"></a>컨테이너 목록을 확인하기</h3><blockquote><p><code>docker ps [OPTIONS]</code></p></blockquote><h3 id="실행-중인-컨테이너-중지하기"><a href="#실행-중인-컨테이너-중지하기" class="headerlink" title="실행 중인 컨테이너 중지하기"></a>실행 중인 컨테이너 중지하기</h3><blockquote><p><code>docker stop [OPTIONS] CONTAINER [CONTAINER ID]</code></p></blockquote><p>컨테이너의 ID를 알면 해당 컨테이너를 중지시킬 수 있다.</p><h3 id="컨테이너-제거하기"><a href="#컨테이너-제거하기" class="headerlink" title="컨테이너 제거하기"></a>컨테이너 제거하기</h3><blockquote><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER ID]</code></p></blockquote><p>마찬가지로 컨테이너의 ID를 알면 해당 컨테이너를 제거할 수 있다.</p><h3 id="이미지-목록-확인하기"><a href="#이미지-목록-확인하기" class="headerlink" title="이미지 목록 확인하기"></a>이미지 목록 확인하기</h3><blockquote><p><code>docker images [OPTIONS]</code></p></blockquote><h3 id="이미지-다운로드-하기"><a href="#이미지-다운로드-하기" class="headerlink" title="이미지 다운로드 하기"></a>이미지 다운로드 하기</h3><blockquote><p><code>docker pull [OPTIONS] NAME[:TAG]</code></p></blockquote><h3 id="이미지-삭제하기"><a href="#이미지-삭제하기" class="headerlink" title="이미지 삭제하기"></a>이미지 삭제하기</h3><blockquote><p><code>docker rmi [OPTIONS] IMAGE [IMAGE ID]</code></p></blockquote><h3 id="컨테이너-로그-보기"><a href="#컨테이너-로그-보기" class="headerlink" title="컨테이너 로그 보기"></a>컨테이너 로그 보기</h3><blockquote><p><code>docker logs [OPTIONS] CONTAINER</code></p></blockquote><h3 id="컨테이너에-접근하기"><a href="#컨테이너에-접근하기" class="headerlink" title="컨테이너에 접근하기"></a>컨테이너에 접근하기</h3><blockquote><p><code>docker exec [OPTIONS] CONTAINER [ARG...]</code></p></blockquote><p>현재 실행중인 <code>ubuntu</code>에 접근한다고 가정하면 아래와 같이 입력하면 된다.<br>터미널을 사용하는 것과 같이 접근이 가능해서 자유롭게 명령어를 실행하고 심지어 패키지도 설치할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/03/23/docker-002/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker의 기본</title>
      <link>https://daphne-dev.github.io/2021/03/23/docker-001/</link>
      <guid>https://daphne-dev.github.io/2021/03/23/docker-001/</guid>
      <pubDate>Tue, 23 Mar 2021 08:32:32 GMT</pubDate>
      <description>
      
        &lt;div align=center&gt;

&lt;p&gt;&lt;img src=&quot;/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Docker란&quot;&gt;&lt;a href=&quot;#Docker란&quot; class=&quot;headerlink&quot; title=&quot;Docker란 ?&quot;&gt;&lt;/a&gt;Docker란 ?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컨테이너 기반의 오픈소스 가상화 플랫폼. 프로세스를 격리시켜서 사용하는 방식이기 때문에 가볍고 빠르며 하나의 서버에 여러 개의 컨테이너를 실행해도 서로 영향을 미치지 않고 독립적으로 실행되어 가벼운 VM을 사용하는 느낌을 준다.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div align=center><p><img src="/image/docker.png" alt=""></p></div><h2 id="Docker란"><a href="#Docker란" class="headerlink" title="Docker란 ?"></a>Docker란 ?</h2><blockquote><p>컨테이너 기반의 오픈소스 가상화 플랫폼. 프로세스를 격리시켜서 사용하는 방식이기 때문에 가볍고 빠르며 하나의 서버에 여러 개의 컨테이너를 실행해도 서로 영향을 미치지 않고 독립적으로 실행되어 가벼운 VM을 사용하는 느낌을 준다.</p></blockquote><span id="more"></span><h2 id="Container-VS-VM"><a href="#Container-VS-VM" class="headerlink" title="Container VS VM"></a>Container VS VM</h2><p><img src="/image/container-vs-vm.png" alt=""></p><p>기존의 VM(Virtual Machine)에서의 가상화 방식은 호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식이었다. 여러가지 OS들을 가상화하여 사용할 수 있었지만 무겁고 느려서 운영환경에서는 사용할 수 없었다.</p><p>이를 개선하기 위해 <code>프로세스를 격리하는 방식</code>이 등장하게 되었는데 이 방식이 바로 컨테이너 방식이다. 마치 가벼운 VM을 실행하는 느낌을 주며 컨테이너에 터미널로 접속하여 명령어도 입력이 가능하며 패키지도 물론 설치가 가능하고 여러 개의 프로세스를 백그라운드로 실행할 수 도 있다.</p><p>컨테이너를 새로 만드는 데 걸리는 시간은 겨우 1 ~ 2초 밖에 걸리지 않아 기존의 가상머신들과 비교해서 월등히 빠른 성능을 보여준다.</p><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>도커에서 이미지는 <code>컨테이너 실행에 필요한 파일과 설정 값 등을 포함하고 있는 것</code>으로 상태 값을 가지지 않고 변하지 않는다. 컨테이너는 이미지를 실행한 상태라고 볼 수 있으며 추가되거나 변하는 값은 컨테이너에 저장된다. 즉, 컨테이너 실행을 위한 모든 정보를 가지고 있기 때문에 그 이상의 파일을 설치하거나 할 필요가 전혀 없다. 이미지 하나만 있으면 ubuntu든 mysql이든 컨테이너를 손쉽게 생성할 수 있게 된다.</p><h2 id="Image-layer"><a href="#Image-layer" class="headerlink" title="Image layer"></a>Image layer</h2><p><img src="/image/image-layer.png" alt=""></p><p>보통 Image 하나 당 수 백 메가(MB)에 이르는데, 기존 Image에 파일 하나 추가했다고 새로 생성한다면 매우 비효율 적일 것이다.</p><p>도커에서는 이러한 문제를 해결하기 위해 <code>레이어(layer)</code>라는 개념을 사용하고 있다.<br>예를 들어 기존의 ubuntu 이미지가 <code>A + B + C</code> 로 이루어져 있다면 이를 베이스로 만든 nginx의 이미지는 <code>A + B + C + nginx</code>가 된다. 즉, 기존 레이어를 제외한 새로운 레이어만 받으면 되기 때문에 효율적인 이미지 관리가 가능하다.</p><p>컨테이너를 생성할 때도 마찬가지로 레이어 방식을 사용하는데 기존의 이미지 레이어를 올린 후 그 위에 읽기/쓰기 레이어를 추가함으로써 컨테이너가 실행 중에 생성하는 파일이나 변경한 내용 등은 읽기/쓰기 레이어에 저장되므로 여러 개의 컨테이너를 생성해도 최소한의 용량만 사용하게 된다.</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>이미지를 만들어 관리하면서 불편한 점이 생기게 되는데 해당 이미지가 어떤 목적으로 만든 이미지였는지 기억하기 어렵게 되어버린다. 그래서 도커에서는 이미지를 만들기 위해 Dockerfile이라는 파일에 자체 DSL언어를 이용하여 이미지 생성 과정을 적어 관리함으로써 누구나 쉽게 이미지 생성 과정을 보며 수정할 수 있게 된다.</p><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>도커 이미지들은 보통 수 백 메가(MB)에서 많게는 수 기가(GB)가 넘는 경우도 흔하다. 이러한 이미지들을 서버에 저장하고 관리하는 것은 쉽지 않은데 도커에서는 Docker Hub를 통해 공개 이미지를 무료로 관리해준다.</p><h2 id="쉬운-Command와-API"><a href="#쉬운-Command와-API" class="headerlink" title="쉬운 Command와 API"></a>쉬운 Command와 API</h2><p>도커 클라이언트의 커맨드 명령어는 잘 만들어져 있어서 직관적이고 사용하기 쉽다. 또한 http 기반의 RestAPI도 지원하여 확장성이 좋다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/03/23/docker-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[프로그래머스] Level 1 신규 아이디 추천</title>
      <link>https://daphne-dev.github.io/2021/01/27/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-033/</link>
      <guid>https://daphne-dev.github.io/2021/01/27/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-033/</guid>
      <pubDate>Wed, 27 Jan 2021 04:30:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/algo_033_001.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/algo_033_001.PNG" alt=""></p><span id="more"></span><p><img src="/image/algo_033_002.PNG" alt=""><br><img src="/image/algo_033_003.PNG" alt=""></p><p><strong>풀이</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">new_id</span>):</span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 1단계</span></span><br><span class="line">    new_id = new_id.lower()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 2단계 &amp; 3단계</span></span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> new_id:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">str</span> == <span class="string">&#x27;-&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span> == <span class="string">&#x27;_&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span> == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> (<span class="number">97</span> &lt;= <span class="built_in">ord</span>(<span class="built_in">str</span>) &lt;= <span class="number">122</span>) <span class="keyword">or</span> (<span class="number">48</span> &lt;= <span class="built_in">ord</span>(<span class="built_in">str</span>) &lt;= <span class="number">57</span>)):</span><br><span class="line">            <span class="keyword">if</span> tmp == <span class="string">&#x27;.&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span> == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                tmp = <span class="built_in">str</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp = <span class="built_in">str</span></span><br><span class="line">            answer += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 4단계</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(answer) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> answer[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            answer = answer[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(answer) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> answer[-<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            answer = answer[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 5단계</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(answer):</span><br><span class="line">        answer = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 6단계</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(answer) &gt;= <span class="number">16</span>:</span><br><span class="line">        answer = answer[:<span class="number">15</span>]</span><br><span class="line">        <span class="keyword">if</span> answer[-<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            answer = answer[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 7단계</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(answer) &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(answer) &lt; <span class="number">3</span>:</span><br><span class="line">            answer += answer[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>출처 : 프로그래머스 코딩 테스트 연습<br><a href="https://programmers.co.kr/learn/courses/30/lessons/72410">https://programmers.co.kr/learn/courses/30/lessons/72410</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/27/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-033/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[프로그래머스] Level 2 기능개발</title>
      <link>https://daphne-dev.github.io/2021/01/21/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-032/</link>
      <guid>https://daphne-dev.github.io/2021/01/21/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-032/</guid>
      <pubDate>Thu, 21 Jan 2021 14:43:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/algo_032_001.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/algo_032_001.PNG" alt=""></p><span id="more"></span><p><img src="/image/algo_032_002.PNG" alt=""></p><p><strong>풀이</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">progresses, speeds</span>):</span><br><span class="line">    answer = []</span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(progresses) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> progresses[<span class="number">0</span>] + (time * speeds[<span class="number">0</span>]) &gt;= <span class="number">100</span>:</span><br><span class="line">            progresses.pop(<span class="number">0</span>)</span><br><span class="line">            speeds.pop(<span class="number">0</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">                answer.append(count)</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">            time +=<span class="number">1</span></span><br><span class="line">    answer.append(count)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>출처 : 프로그래머스 코딩 테스트 연습<br><a href="https://programmers.co.kr/learn/courses/30/lessons/42586">https://programmers.co.kr/learn/courses/30/lessons/42586</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/21/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-032/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git flow, GitHub flow, GitLab flow</title>
      <link>https://daphne-dev.github.io/2021/01/18/git-flow-github-flow-gitlab-flow/</link>
      <guid>https://daphne-dev.github.io/2021/01/18/git-flow-github-flow-gitlab-flow/</guid>
      <pubDate>Mon, 18 Jan 2021 09:20:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Git을-더-잘쓰기-위한-방법&quot;&gt;&lt;a href=&quot;#Git을-더-잘쓰기-위한-방법&quot; class=&quot;headerlink&quot; title=&quot;Git을 더 잘쓰기 위한 방법&quot;&gt;&lt;/a&gt;Git을 더 잘쓰기 위한 방법&lt;/h2&gt;&lt;p&gt;Git flow, GitHub flow, GitLab flow 모두 Git을 더 잘 써먹기 위한 방법들을 이야기한다. 어떻게 하면 대규모 프로젝트들을 더 깔끔하게 관리할 수 있을지를 고민하다 탄생한 것들이다. 특별한 기술이라기 보다도 &lt;code&gt;Git을 관리하기 위한 전략&lt;/code&gt;이라고 표현하는게 맞는 표현이다.&lt;/p&gt;
&lt;h2 id=&quot;Git-flow&quot;&gt;&lt;a href=&quot;#Git-flow&quot; class=&quot;headerlink&quot; title=&quot;Git flow&quot;&gt;&lt;/a&gt;Git flow&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Git flow&lt;/code&gt; 방식은 Vincent Driessen(&lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt;)가 제안한 방식으로 아래 그림과 같이 이루어지는 방식이다. 그림만 이해해도 Git flow에 대한 이해가 다 됐다고 봐도 된다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Git을-더-잘쓰기-위한-방법"><a href="#Git을-더-잘쓰기-위한-방법" class="headerlink" title="Git을 더 잘쓰기 위한 방법"></a>Git을 더 잘쓰기 위한 방법</h2><p>Git flow, GitHub flow, GitLab flow 모두 Git을 더 잘 써먹기 위한 방법들을 이야기한다. 어떻게 하면 대규모 프로젝트들을 더 깔끔하게 관리할 수 있을지를 고민하다 탄생한 것들이다. 특별한 기술이라기 보다도 <code>Git을 관리하기 위한 전략</code>이라고 표현하는게 맞는 표현이다.</p><h2 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h2><p><code>Git flow</code> 방식은 Vincent Driessen(<a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>)가 제안한 방식으로 아래 그림과 같이 이루어지는 방식이다. 그림만 이해해도 Git flow에 대한 이해가 다 됐다고 봐도 된다.</p><span id="more"></span><p><img src="/image/git-flow-001.png" alt=""></p><p>그림의 각 브랜치 마다의 역할을 살펴보자</p><ul><li>master : 배포되었거나 지금 당장 배포를 해도 문제없는 소스가 저장된 브랜치</li><li>develop : 다음 배포를 위해 개발을 진행하는 브랜치</li></ul><p><code>master 브랜치</code>와 <code>develop 브랜치</code>는 항상 <code>remote repository</code>에 유지되는 브랜치이다.</p><p>master 브랜치는 보통 배포할 때마다 태그를 달아줘서 관리를 한다.<br>develop 브랜치는 개발자들이 각각 자신의 로컬에 브랜치를 따로 생성해서 개발을 진행한 후 해당 개발이 완료가 되면 develop 브랜치에 push 혹은 PullRequest 요청을 해서 merge 하는 루틴으로 개발이 진행된다.</p><ul><li>feature branch : 기능 단위 개발이 진행되는 브랜치</li><li>hotfixs branch : 배포했던 버전에 문제가 생겨서 긴급한 수정이 필요할 떄 그런 개발이 진행되는 브랜치</li><li>release branch : 내부적으로 어느정도 개발이 되었다고 판단되어 배포할 준비가 된 소스가 저장되는 브랜치</li></ul><br><p>Git flow가 대규모 프로젝트에서는 적합할지 모르지만 대다수의 프로젝트에서는 굳이 필요없는 절차까지 준수하도록 해서 생산성을 떨어뜨린다는 의견이 나오게 되었고 그렇게 탄생한 것이 <code>GitHub flow</code>와 <code>GitLab flow</code>다</p><br><h2 id="GitHub-flow"><a href="#GitHub-flow" class="headerlink" title="GitHub flow"></a>GitHub flow</h2><p><img src="/image/github-flow_001.png" alt=""></p><p><code>master 브랜치</code>는 항상 최신의 상태를 유지하며 stable하다. 이는 항상 배포가 가능하다는 의미이다.<br>GitHub flow에서는 <code>feature</code>나 <code>develop</code> 브랜치 같은 것이 존재하지 않는다. 만약 작업을 위해 브랜치를 따야한다면 작업하는게 무엇인지 명확히 알 수 있도록 브랜치 명을 작성한다.<br>CI가 필수적이며, 배포를 자동으로 진행할 수 있다.<br>GitHub flow에서는 <code>PullRequest 기능</code>을 권장한다. 이를 통해 코드 리뷰를 하기 위해서 이다.<br><code>Git flow</code>에 비해 간단한 구조로 되어있어서 비교적 신속하게 배포를 수행할 수 있다.</p><br><h2 id="GitLab-flow"><a href="#GitLab-flow" class="headerlink" title="GitLab flow"></a>GitLab flow</h2><p><img src="/image/gitlab-flow_001.png" alt=""></p><p><code>production 브랜치</code>는 <code>Git flow</code>에서의 <code>master 브랜치</code>와 같은 역할을 한다. GitLab flow에서의 master 브랜치는 production 브랜치로 병합한다.<br>이를 통해 production 브랜치에서 릴리즈된 코드가 항상 프로젝트의 최신 버전 상태를 유지해야할 필요가 없게 한다.</p><p><code>Git flow</code>와 <code>GitHub flow</code>의 각각의 장점을 절충한 것 같은 느낌이 든다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/18/git-flow-github-flow-gitlab-flow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] 클로저(Closure)</title>
      <link>https://daphne-dev.github.io/2021/01/13/javascript-004/</link>
      <guid>https://daphne-dev.github.io/2021/01/13/javascript-004/</guid>
      <pubDate>Wed, 13 Jan 2021 14:18:43 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;클로저-Closure-란&quot;&gt;&lt;a href=&quot;#클로저-Closure-란&quot; class=&quot;headerlink&quot; title=&quot;클로저(Closure)란 ?&quot;&gt;&lt;/a&gt;클로저(Closure)란 ?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;어떤 함수에서 선언한 변수를 참조하는 내부함수를 외부로 전달할 경우, 함수의 실행 컨텍스트가 종료된 후에도 해당 변수가 사라지지 않는 현상이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;렉시컬-환경-Lexical-Environment&quot;&gt;&lt;a href=&quot;#렉시컬-환경-Lexical-Environment&quot; class=&quot;headerlink&quot; title=&quot;렉시컬 환경(Lexical Environment)&quot;&gt;&lt;/a&gt;렉시컬 환경(Lexical Environment)&lt;/h2&gt;&lt;p&gt;클로저에 대한 개념을 이해하기 위해서는 렉시컬 환경(Lexical Environment)에 대한 이해가 필요하다.&lt;br&gt;자바스크립트에서는 &lt;code&gt;실행 중인 함수&lt;/code&gt;, &lt;code&gt;코드 블록 &amp;#123;...&amp;#125;&lt;/code&gt;, &lt;code&gt;스크립트 전체&lt;/code&gt;는 렉시컬 환경이라 불리는 내부 숨김 연관 객체를 갖는다. &lt;code&gt;if 문&lt;/code&gt;, &lt;code&gt;for 문&lt;/code&gt; 등에서 사용되는 코드 블록도 이에 해당된다.&lt;/p&gt;
&lt;p&gt;렉시컬 환경 객체는 두 부분으로 구성된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;환경 레코드(Environment Record) : 모든 지역 변수를 프로퍼티로 저장하고 있는 객체, &lt;code&gt;this&lt;/code&gt;값과 같은 기타 정보도 여기에 저장된다.&lt;/li&gt;
&lt;li&gt;외부 렉시컬 환경(Outer Lexical Environment)에 대한 참조 : 외부 코드와 연관됨&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;코드를 통해 알아보자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="클로저-Closure-란"><a href="#클로저-Closure-란" class="headerlink" title="클로저(Closure)란 ?"></a>클로저(Closure)란 ?</h2><blockquote><p>어떤 함수에서 선언한 변수를 참조하는 내부함수를 외부로 전달할 경우, 함수의 실행 컨텍스트가 종료된 후에도 해당 변수가 사라지지 않는 현상이다.</p></blockquote><h2 id="렉시컬-환경-Lexical-Environment"><a href="#렉시컬-환경-Lexical-Environment" class="headerlink" title="렉시컬 환경(Lexical Environment)"></a>렉시컬 환경(Lexical Environment)</h2><p>클로저에 대한 개념을 이해하기 위해서는 렉시컬 환경(Lexical Environment)에 대한 이해가 필요하다.<br>자바스크립트에서는 <code>실행 중인 함수</code>, <code>코드 블록 &#123;...&#125;</code>, <code>스크립트 전체</code>는 렉시컬 환경이라 불리는 내부 숨김 연관 객체를 갖는다. <code>if 문</code>, <code>for 문</code> 등에서 사용되는 코드 블록도 이에 해당된다.</p><p>렉시컬 환경 객체는 두 부분으로 구성된다.</p><ol><li>환경 레코드(Environment Record) : 모든 지역 변수를 프로퍼티로 저장하고 있는 객체, <code>this</code>값과 같은 기타 정보도 여기에 저장된다.</li><li>외부 렉시컬 환경(Outer Lexical Environment)에 대한 참조 : 외부 코드와 연관됨</li></ol><p>코드를 통해 알아보자.</p><span id="more"></span><p><img src="/image/javascript_004_001.PNG" alt=""></p><p><code>변수 phrase</code>는 특수 내부 객체인 <code>환경 레코드</code>의 프로퍼티라고 할 수 있다.<br><code>변수를 가져오거나 변경</code>하는 것은 <code>환경 레코드의 프로퍼티를 가져오거나 변경</code>함을 의미한다.</p><p>위의 코드에는 렉시컬 환경이 하나만 존재하는데, 이렇게 스크립트 전체와 관련된 렉시컬 환경은 <code>전역 렉시컬 환경(Global Lexical Environment)</code>라고 한다.</p><p>전역 렉시컬 환경은 외부 참조를 갖지 않기 때문에 <code>null</code>을 가리키는 것을 알 수 있다.</p><p>이번엔 좀 더 긴 코드를 살펴보자.</p><p><img src="/image/javascript_004_002.PNG" alt=""></p><p>우측의 네모 상자들은 코드가 한 줄, 한 줄 실행될 때마다 전역 렉시컬 환경이 어떻게 변화하는지 보여준다.</p><ol><li>처음 스크립트가 시작되면 스크립트 내에서 선언한 변수 전체가 렉시컬 환경에 올라간다. 이때 변수의 상태는 <code>uninitialized</code>가 되는데 자바 스크립트 엔진은 해당 상태의 변수를 인지는 하지만 바로 밑의 <code>let</code>을 만나기 전까지는 이 변수를 사용할 수 없다.</li><li><code>let phrase</code> 선언은 했지만 값을 할당하지는 않았기 떄문에 <code>undefined</code> 상태이다.</li><li><code>Hello</code>가 할당된 상태</li><li><code>Bye</code>로 값이 변경된 상태</li></ol><p>여기서 짚고 넘어가야할 점이 하나 있는데 렉시컬 환경은 이론적으로 존재하는 공간이기 때문에 실제 자바스크립트 코드를 통해 직접 접근하거나 조작하는 행위는 불가능하다.</p><h2 id="함수-선언문에서의-렉시컬-환경"><a href="#함수-선언문에서의-렉시컬-환경" class="headerlink" title="함수 선언문에서의 렉시컬 환경"></a>함수 선언문에서의 렉시컬 환경</h2><p>함수 선언문으로 선언한 함수는 일반 변수와는 달리 바로 초기화된다.<br>이 말은 함수 선언문으로 선언한 함수는 렉시컬 환경이 만들어지는 즉시 사용할 수 있다는 말이다. 변수의 경우 <code>let</code>을 만나 선언이 될 때까지 사용할 수 없는 것과 달리 말이다.</p><p><img src="/image/javascript_004_003.PNG" alt=""></p><p>위 그림을 보면 선언되기 전에도 <code>say</code>가 함수임을 인지하고 있음을 확인할 수 있다.<br>단, 이런 방식은 함수 선언문의 경우만 적용이 된다.<br>아래와 같이 함수 표현식과 같은 경우 해당되지 않는다.</p><blockquote><p><code>let say = function(name)...</code></p></blockquote><h2 id="내부와-외부에서의-렉시컬-환경"><a href="#내부와-외부에서의-렉시컬-환경" class="headerlink" title="내부와 외부에서의 렉시컬 환경"></a>내부와 외부에서의 렉시컬 환경</h2><p>함수를 호출하여 실행하면 새로운 렉시컬 환경이 자동으로 만들어진다.<br>해당 렉시컬 환경에서는 함수 호출 시 넘겨받은 매개변수와 함수 안의 지역 변수가 저장된다.</p><p>아래의 코드를 살펴보자</p><p><img src="/image/javascript_004_004.PNG" alt=""></p><p><code>say(&quot;John&quot;)</code>을 호출하게 되면 두 개의 렉시컬 환경을 갖게 되는데, 내부 렉시컬 환경과 외부 렉시컬 환경이다.</p><p>내부 렉시컬 환경은 호출 중인 함수인 <code>say</code>를 위해 만들어져서 매개변수로 받은 name 값을 갖게 된다. 이 내부 렉시컬 환경은 외부 렉시컬 환경을 가리키는데 여기에서는 전역 렉시컬 환경을 가리키고 있다.</p><p>say 함수에서 <code>alert</code>가 실행될 때 name은 이미 내부 렉시컬 환경 내에 있기 때문에 넘어가게 되고 <code>phrase</code> 값을 찾을 수 없어서 내부 렉시컬이 가리키고 있는 외부 렉시컬 환경으로 접근해서 <code>phrase</code> 값을 찾게 된다.</p><p>이렇게 <code>내부 렉시컬 환경에서 찾을 수 없는 값을 외부 렉시컬 환경에 접근하여 찾는데, 이러한 과정은 검색 범위가 전역 렉시컬 환경으로 확장될 때까지 반복</code>된다.</p><p><img src="/image/javascript_004_005.PNG" alt=""></p><h2 id="반환-함수에서의-렉시컬-환경"><a href="#반환-함수에서의-렉시컬-환경" class="headerlink" title="반환 함수에서의 렉시컬 환경"></a>반환 함수에서의 렉시컬 환경</h2><p><img src="/image/javascript_004_006.PNG" alt=""></p><p><code>makeCounter()</code>을 호출하면 호출할 때마다 새로운 렉시컬 환경 객체가 만들어진다. 그리고 이 객체엔 <code>makeCounter</code>를 실행하는데 필요한 변수들이 저장된다. 위 그림을 보면 내부 렉시컬 환경과 전역 렉시컬 환경이 만들어지는 것읕 볼 수 있다.</p><p><img src="/image/javascript_004_007.PNG" alt=""></p><p>실행 흐름이 <code>makeCounter</code> 함수 내부의 함수까지 오게되면 내부 렉시컬 환경을 하나 더 만들게 되고 그 안에서 <code>count</code> 변수를 찾는다. 하지만 없기 때문에 참조 중인 <code>makeCounter</code> 함수의 렉시컬 환경으로 가서 찾는다.<br><code>count</code> 변수를 찾게 되고 0을 반환해주게 된다. 그 후 실행이 종료되면 아래 그림과 같이 <code>count</code> 값을 1 증가 시킨 상태가 된다.</p><p><img src="/image/javascript_004_008.PNG" alt=""></p><p><code>counter()</code>를 여러 번 호출하면 <code>count</code> 변수가 <code>2, 3</code>으로 증가하는 이유가 이 떄문이다.</p><h2 id="가비지-컬렉션"><a href="#가비지-컬렉션" class="headerlink" title="가비지 컬렉션"></a>가비지 컬렉션</h2><p>함수 호출이 끝나면 함수에 대응하는 렉시컬 환경이 메모리에서 제거되게 된다.<br>단, 해당 렉시컬 환경이 다른 렉시컬 환경으로부터 참조되고 있는 상태라면 여전히 메모리에 유지되게 된다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>클로저라는 개념은 말로 설명하기도 이해하기도 두루뭉술한 느낌의 개념이다. 하지만 클로저는 자바스크립트에서 중요한 개념으로 클로저의 특성을 이용해 코드를 작성한 것을 이해하고 자유자재로 다룰려면 꼭 알아두어야 한다.</p><p>앞서 말한대로 클로저란 어떤 함수에서 선언한 변수를 참조하는 내부함수를 외부로 전달할 경우, 함수의 실행 컨텍스트가 종료된 후에도 해당 변수가 사라지지 않는 현상이다. 그 이유는 내부 렉시컬 환경에서 찾을 수 없는 변수를 외부 렉시컬 환경에서 찾아서 참조하고 있기 때문이다.</p><p>내부함수를 외부로 전달하는 방법에는 함수를 <code>return</code>하는 경우뿐만 아니라 콜백으로 전달하는 경우도 포함된다.</p><p>클로저는 그 특성상 메모리를 계속 차지하는 개념이므로 사용이 끝난 클로저에 대해서 메모리를 관리에 주의해줄 필요가 있다.</p><p>이 글은 <a href="https://ko.javascript.info/closure">모던 자바스크립트 - 클로저</a>를 참고해서 쓴 글입니다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/13/javascript-004/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[JavaScript] 함수 선언문과 함수 표현식</title>
      <link>https://daphne-dev.github.io/2021/01/11/javascript-003/</link>
      <guid>https://daphne-dev.github.io/2021/01/11/javascript-003/</guid>
      <pubDate>Mon, 11 Jan 2021 10:15:27 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;함수-선언문과-함수-표현식의-특징&quot;&gt;&lt;a href=&quot;#함수-선언문과-함수-표현식의-특징&quot; class=&quot;headerlink&quot; title=&quot;함수 선언문과 함수 표현식의 특징&quot;&gt;&lt;/a&gt;함수 선언문과 함수 표현식의 특징&lt;/h2&gt;&lt;p&gt;함수 선언문과 함수 표현식은 둘 다 함수를 정의할 때 쓰이는 방식이다.&lt;/p&gt;
&lt;p&gt;함수 선언문은 &lt;code&gt;function 정의부&lt;/code&gt;만 존재하고 별도의 할당 명령이 없다.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 함수 선언문 방식&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;a&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// 정상 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;반면 함수 표현식은 정의한 &lt;code&gt;function&lt;/code&gt;을 별도의 변수에 할당하는 것을 말한다. 이 때, 정의한 함수의 이름이 없다면 &lt;code&gt;익명 함수 표현식&lt;/code&gt;이라고 하고 이름이 있다면 &lt;code&gt;기명 함수 표현식&lt;/code&gt;이라고 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 익명 함수 표현식&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;b&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// 정상 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 기명 함수 표현식&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;c&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//정상 실행&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;d&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// 에러 발생&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;기명 함수 표현식은 주의할 점이 있다. &lt;code&gt;함수명으로 함수를 호출할 수 없다는 점&lt;/code&gt;이다. 그렇다면 호출도 할 수 없는데 왜 함수명을 쓰는 걸까? 함수명을 사용함으로써 &lt;code&gt;디버깅에 유리&lt;/code&gt;해진다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="함수-선언문과-함수-표현식의-특징"><a href="#함수-선언문과-함수-표현식의-특징" class="headerlink" title="함수 선언문과 함수 표현식의 특징"></a>함수 선언문과 함수 표현식의 특징</h2><p>함수 선언문과 함수 표현식은 둘 다 함수를 정의할 때 쓰이는 방식이다.</p><p>함수 선언문은 <code>function 정의부</code>만 존재하고 별도의 할당 명령이 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 함수 선언문 방식</span></span><br><span class="line"><span class="title function_">a</span>(); <span class="comment">// 정상 실행</span></span><br></pre></td></tr></table></figure><p>반면 함수 표현식은 정의한 <code>function</code>을 별도의 변수에 할당하는 것을 말한다. 이 때, 정의한 함수의 이름이 없다면 <code>익명 함수 표현식</code>이라고 하고 이름이 있다면 <code>기명 함수 표현식</code>이라고 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;; <span class="comment">// 익명 함수 표현식</span></span><br><span class="line"><span class="title function_">b</span>(); <span class="comment">// 정상 실행</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">// 기명 함수 표현식</span></span><br><span class="line"><span class="title function_">c</span>(); <span class="comment">//정상 실행</span></span><br><span class="line"><span class="title function_">d</span>(); <span class="comment">// 에러 발생</span></span><br></pre></td></tr></table></figure><p>기명 함수 표현식은 주의할 점이 있다. <code>함수명으로 함수를 호출할 수 없다는 점</code>이다. 그렇다면 호출도 할 수 없는데 왜 함수명을 쓰는 걸까? 함수명을 사용함으로써 <code>디버깅에 유리</code>해진다.</p><span id="more"></span><h2 id="함수-선언문-vs-함수-표현식"><a href="#함수-선언문-vs-함수-표현식" class="headerlink" title="함수 선언문 vs 함수 표현식"></a>함수 선언문 vs 함수 표현식</h2><p>함수 선언문을 사용할 경우 생길 수 있는 위험성에 대해 알아보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 103</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 103</span></span><br></pre></td></tr></table></figure><p>위의 코드의 경우 어떤 결과가 출력으로 나올까?<br>c가 3으로 나오고, d가 103으로 나오도록 의도했을 지 모른다.</p><p>하지만 결과는 c가 103, d도 103이 나오게 된다.</p><p>왜 이러한 현상이 발생되는 이유는 <a href="https://daphne-dev.github.io/2020/08/17/javascript-002/">호이스팅</a> 때문인데, 전역 컨텍스트가 활성화될 때 전역공간에 선언된 함수들이 모두 가장 위로 끌어올려 지게 된다. 이 때 <code>나중에 할당한 값이 먼저 할당한 값을 덮어씌우기</code> 때문에 마지막에 선언된 함수로 호출이 되게 된다.</p><p><code>함수 표현식</code>으로 정의하면 이러한 문제를 해결할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 103</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/11/javascript-003/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[LeetCode] Two Sum</title>
      <link>https://daphne-dev.github.io/2021/01/09/leetcode-003/</link>
      <guid>https://daphne-dev.github.io/2021/01/09/leetcode-003/</guid>
      <pubDate>Sat, 09 Jan 2021 14:44:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/leetcode_003.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/leetcode_003.PNG" alt=""></p><span id="more"></span><p><strong>풀이</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dic = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target - nums[i] <span class="keyword">in</span> dic) &#123;</span><br><span class="line">      <span class="keyword">return</span> [dic[target - nums[i]], i];</span><br><span class="line">    &#125;</span><br><span class="line">    dic[nums[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>출처 : leetcode 알고리즘 연습<br><a href="https://leetcode.com/problems/longest-palindromic-substring/">https://leetcode.com/problems/longest-palindromic-substring/</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/09/leetcode-003/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[LeetCode] Add Two Numbers</title>
      <link>https://daphne-dev.github.io/2021/01/08/leetcode-002/</link>
      <guid>https://daphne-dev.github.io/2021/01/08/leetcode-002/</guid>
      <pubDate>Fri, 08 Jan 2021 14:27:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/leetcode_002.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/leetcode_002.PNG" alt=""></p><span id="more"></span><p><img src="/image/leetcode_002_002.PNG" alt=""></p><p><strong>풀이</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="keyword">function</span> (<span class="params">l1, l2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> node = result;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (l1 || l2) &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = l1 ? l1.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> val2 = l2 ? l2.<span class="property">val</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> sum = prev + val1 + val2;</span><br><span class="line">    <span class="keyword">const</span> value = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    prev = <span class="built_in">parseInt</span>(sum / <span class="number">10</span>);</span><br><span class="line">    node.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(value);</span><br><span class="line">    node = node.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">    l1 = l1 ? l1.<span class="property">next</span> : <span class="literal">null</span>;</span><br><span class="line">    l2 = l2 ? l2.<span class="property">next</span> : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">    node.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(prev);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>출처 : leetcode 알고리즘 연습<br><a href="https://leetcode.com/problems/add-two-numbers/">https://leetcode.com/problems/add-two-numbers/</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/08/leetcode-002/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[LeetCode] Longest Palindromic Substring</title>
      <link>https://daphne-dev.github.io/2021/01/07/leetcode-001/</link>
      <guid>https://daphne-dev.github.io/2021/01/07/leetcode-001/</guid>
      <pubDate>Thu, 07 Jan 2021 13:17:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/leetcode_001.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/leetcode_001.PNG" alt=""></p><span id="more"></span><p><strong>풀이</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> answerLen = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    l = i;</span><br><span class="line">    r = i;</span><br><span class="line">    <span class="comment">// odd</span></span><br><span class="line">    <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="property">length</span> &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (r - l + <span class="number">1</span> &gt; answerLen) &#123;</span><br><span class="line">        answer = s.<span class="title function_">slice</span>(l, r + <span class="number">1</span>);</span><br><span class="line">        answerLen = r - l + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      l -= <span class="number">1</span>;</span><br><span class="line">      r += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l = i;</span><br><span class="line">    r = i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// even</span></span><br><span class="line">    <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="property">length</span> &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (r - l + <span class="number">1</span> &gt; answerLen) &#123;</span><br><span class="line">        answer = s.<span class="title function_">slice</span>(l, r + <span class="number">1</span>);</span><br><span class="line">        answerLen = r - l + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      l -= <span class="number">1</span>;</span><br><span class="line">      r += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>출처 : leetcode 알고리즘 연습<br><a href="https://leetcode.com/problems/longest-palindromic-substring/">https://leetcode.com/problems/longest-palindromic-substring/</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/07/leetcode-001/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[프로그래머스] Level 4 무지의 먹방 라이브</title>
      <link>https://daphne-dev.github.io/2021/01/06/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-031/</link>
      <guid>https://daphne-dev.github.io/2021/01/06/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-031/</guid>
      <pubDate>Wed, 06 Jan 2021 14:30:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/image/algo_031_001.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="/image/algo_031_001.PNG" alt=""></p><span id="more"></span><p><img src="/image/algo_031_002.PNG" alt=""><br><img src="/image/algo_031_003.PNG" alt=""></p><p><strong>풀이</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">food_times, k</span>):</span><br><span class="line">    <span class="comment"># 전체 음식을 먹는 시간보다 k가 크거나 같으면 -1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(food_times) &lt;= k:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 파이썬에서 제공되는 힙은 최소 힙이다.</span></span><br><span class="line">    <span class="comment"># 시간이 작은 음식을 기준으로 k에 가깝도록 빠르게 감소 시켜야므로</span></span><br><span class="line">    <span class="comment"># 시간이 작은 순서대로 음식을 우선 순위 큐에 저장</span></span><br><span class="line">    q = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(food_times)):</span><br><span class="line">        heapq.heappush(q, (food_times[i], i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 음식을 먹는데 사용한 시간</span></span><br><span class="line">    sum_time = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 직전에 다먹은 음식 시간</span></span><br><span class="line">    prev_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 남아있는 음식의 개수</span></span><br><span class="line">    food_count = <span class="built_in">len</span>(food_times)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> sum_time + ((q[<span class="number">0</span>][<span class="number">0</span>] - prev_time) * food_count) &lt;= k:</span><br><span class="line">        now_time = heapq.heappop(q)[<span class="number">0</span>]</span><br><span class="line">        sum_time += (now_time - prev_time) * food_count</span><br><span class="line">        food_count -= <span class="number">1</span></span><br><span class="line">        prev_time = now_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 남아있는 음식 중 순서가 빠른 순서대로 정렬</span></span><br><span class="line">    answer = <span class="built_in">sorted</span>(q, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># (k - 지금까지 음식을 먹는데 사용한 총 시간) = 남은 시간</span></span><br><span class="line">    <span class="comment"># food_count = 남아있는 음식의 개수</span></span><br><span class="line">    <span class="comment"># 두 값을 이용해 나머지를 구하면 섭취해야 되는 음식의 번호를 알 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> answer[(k - sum_time) % food_count][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>출처 : 프로그래머스 코딩 테스트 연습<br><a href="https://programmers.co.kr/learn/courses/30/lessons/42891">https://programmers.co.kr/learn/courses/30/lessons/42891</a></p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/06/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&amp;SQL/algo-031/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[DataBase] Transaction</title>
      <link>https://daphne-dev.github.io/2021/01/04/database-transaction/</link>
      <guid>https://daphne-dev.github.io/2021/01/04/database-transaction/</guid>
      <pubDate>Mon, 04 Jan 2021 12:00:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;트랜잭션-Transaction-이란&quot;&gt;&lt;a href=&quot;#트랜잭션-Transaction-이란&quot; class=&quot;headerlink&quot; title=&quot;트랜잭션(Transaction)이란?&quot;&gt;&lt;/a&gt;트랜잭션(Transaction)이란?&lt;/h2&gt;&lt;p&gt;트랜잭션은 작업의 완전성을 보장해주는 것이다. 즉, 논리적인 작업을 모두 완벽하게 처리하지 못할 경우 원 상태로 복구해서 작업의 일부만 적용되는 일을 방지하는 기능이다.&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션과-Lock&quot;&gt;&lt;a href=&quot;#트랜잭션과-Lock&quot; class=&quot;headerlink&quot; title=&quot;트랜잭션과 Lock&quot;&gt;&lt;/a&gt;트랜잭션과 Lock&lt;/h2&gt;&lt;p&gt;잠금(Lock)은 여러 커넥션에서 동시에 동일한 자원을 요청할 경우 순서대로 한 시점에 하나의 커넥션만 변경할 수 있게 해주는 역할을 한다.&lt;/p&gt;
&lt;p&gt;트랜잭션은 논리적인 작업 셋 중 한 개든 두 개 이상이든 모든 작업이 제대로 끝나지 않는다면 아무것도 적용되지 않게 보장해준다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="트랜잭션-Transaction-이란"><a href="#트랜잭션-Transaction-이란" class="headerlink" title="트랜잭션(Transaction)이란?"></a>트랜잭션(Transaction)이란?</h2><p>트랜잭션은 작업의 완전성을 보장해주는 것이다. 즉, 논리적인 작업을 모두 완벽하게 처리하지 못할 경우 원 상태로 복구해서 작업의 일부만 적용되는 일을 방지하는 기능이다.</p><h2 id="트랜잭션과-Lock"><a href="#트랜잭션과-Lock" class="headerlink" title="트랜잭션과 Lock"></a>트랜잭션과 Lock</h2><p>잠금(Lock)은 여러 커넥션에서 동시에 동일한 자원을 요청할 경우 순서대로 한 시점에 하나의 커넥션만 변경할 수 있게 해주는 역할을 한다.</p><p>트랜잭션은 논리적인 작업 셋 중 한 개든 두 개 이상이든 모든 작업이 제대로 끝나지 않는다면 아무것도 적용되지 않게 보장해준다.</p><span id="more"></span><h2 id="트랜잭션의-특성"><a href="#트랜잭션의-특성" class="headerlink" title="트랜잭션의 특성"></a>트랜잭션의 특성</h2><p>트랜잭션은 ACID라는 4가지 특성을 만족해야한다.</p><h3 id="원자성-Atomicity"><a href="#원자성-Atomicity" class="headerlink" title="원자성(Atomicity)"></a>원자성(Atomicity)</h3><p>트랜잭션 중간에 어떠한 문제가 발생했을 때 트랜잭션에 해당하는 어떠한 작업 내용도 수행되어서는 안되며 아무런 문제가 발생되지 않았을 경우에만 모든 작업이 수행되어야 한다.</p><h3 id="일관성-Consistency"><a href="#일관성-Consistency" class="headerlink" title="일관성(Consistency)"></a>일관성(Consistency)</h3><p>트랜잭션이 완료된 다음의 상태에서도 트랜잭션이 일어나기 전의 상황과 동일하게 데이터의 일관성을 보장해야 한다.</p><h3 id="고립성-Isolation"><a href="#고립성-Isolation" class="headerlink" title="고립성(Isolation)"></a>고립성(Isolation)</h3><p>각각의 트랜잭션은 서로 간섭업이 독립적으로 수행되어야 한다.</p><h3 id="지속성-Durability"><a href="#지속성-Durability" class="headerlink" title="지속성(Durability)"></a>지속성(Durability)</h3><p>트랜잭션이 정상적으로 종료된 다음에는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다.</p><h2 id="트랜잭션을-사용할-때-주의할-점"><a href="#트랜잭션을-사용할-때-주의할-점" class="headerlink" title="트랜잭션을 사용할 때 주의할 점"></a>트랜잭션을 사용할 때 주의할 점</h2><p>트랜잭션은 꼭 필요한 최소의 코드에만 적용하는 것이 좋다. 일반적으로 데이터베이스에서 커넥션의 개수는 제한적이기 때문인데, 각각의 프로그램이 커넥션을 소유하는 시간이 길어진다면 사용 가능한 여유 커넥션의 수가 줄어들게 되어 커넥션을 가져가기 위해 기다리는 상황이 발생할 수 있기 때문이다.</p><h2 id="교착상태"><a href="#교착상태" class="headerlink" title="교착상태"></a>교착상태</h2><p>복수의 트랜잭션을 사용할 때 교착상태가 일어날 수 있다. 교착상태란 두 개 이상의 트랜잭션이 특정 자원의 잠금(Lock)을 획득한 채 다른 트랜잭션이 소유하고 있는 잠금을 요구하면 아무리 기다려도 상황이 바뀌지 않는 상태가 되는데, 이를 <code>교착상태</code>라고 한다.</p><p>예를 들면, 두 개의 A, B 테이블이 있고 각각의 다른 1번, 2번 트랜잭션이 테이블의 잠금을 획득한다고 가정해보자.</p><p>1번 트랜잭션이 B의 잠금을 획득<br>2번 트랜잭션이 A의 잠금을 획득</p><p>이 상태에서 트랜잭션을 commit 하지 않은채 서로의 첫 번째 행에 대한 잠금을 요청하면 <code>Deadlock</code>이 발생한다.</p><h3 id="교착상태의-빈도를-낮추는-방법"><a href="#교착상태의-빈도를-낮추는-방법" class="headerlink" title="교착상태의 빈도를 낮추는 방법"></a>교착상태의 빈도를 낮추는 방법</h3><ol><li>트랜잭션을 자주 커밋한다.</li><li>정해진 순서로 테이블에 접근하게 한다.</li><li>읽기 잠금 획득의 사용을 피한다.</li><li>한 테이블의 복수 행을 복수의 연결에서 순서 없이 갱신하면 교착 상태가 발생하기 쉽다. 이 때에는 테이블 단위의 잠금을 획득하여 갱신을 직렬화 하면 동시성은 떨어지지만 교착상태를 회피할 수 있다.</li></ol>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/04/database-transaction/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[DataBase] Index</title>
      <link>https://daphne-dev.github.io/2021/01/04/database-index/</link>
      <guid>https://daphne-dev.github.io/2021/01/04/database-index/</guid>
      <pubDate>Mon, 04 Jan 2021 09:23:25 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;인덱스-Index-란&quot;&gt;&lt;a href=&quot;#인덱스-Index-란&quot; class=&quot;headerlink&quot; title=&quot;인덱스(Index)란?&quot;&gt;&lt;/a&gt;인덱스(Index)란?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;단어 뜻 그대로 책의 맨 처음이나 맨 마지막에 있는 색인이라고 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;데이터 = 책의 내용&lt;br&gt;데이터가 저장된 레코드의 주소 = 인덱스 목록의 페이지 번호&lt;/p&gt;
&lt;p&gt;DBMS의 인덱스는 항상 정렬된 상태를 유지한다.&lt;br&gt;원하는 값을 탐색하는데는 빠르지만 데이터를 추가, 삭제, 수정하는 경우 쿼리문 실행 속도가 느려진다.&lt;/p&gt;
&lt;p&gt;즉, 데이터의 저장 성능을 낮추는 대신 데이터의 읽기 속도를 높이는 기능이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="인덱스-Index-란"><a href="#인덱스-Index-란" class="headerlink" title="인덱스(Index)란?"></a>인덱스(Index)란?</h2><blockquote><p>단어 뜻 그대로 책의 맨 처음이나 맨 마지막에 있는 색인이라고 할 수 있다.</p></blockquote><p>데이터 = 책의 내용<br>데이터가 저장된 레코드의 주소 = 인덱스 목록의 페이지 번호</p><p>DBMS의 인덱스는 항상 정렬된 상태를 유지한다.<br>원하는 값을 탐색하는데는 빠르지만 데이터를 추가, 삭제, 수정하는 경우 쿼리문 실행 속도가 느려진다.</p><p>즉, 데이터의 저장 성능을 낮추는 대신 데이터의 읽기 속도를 높이는 기능이다.</p><span id="more"></span><h2 id="인덱스-방법"><a href="#인덱스-방법" class="headerlink" title="인덱스 방법"></a>인덱스 방법</h2><h3 id="B-Tree-인덱스"><a href="#B-Tree-인덱스" class="headerlink" title="B+-Tree 인덱스"></a>B+-Tree 인덱스</h3><p>이름 그대로 데이터를 트리 구조로 저장하는 형태의 인덱스이다. 균형잡힌 뛰어난 범용성 때문에 가장 많이 사용되는 방법이다.</p><h3 id="해시-인덱스"><a href="#해시-인덱스" class="headerlink" title="해시 인덱스"></a>해시 인덱스</h3><p>칼럼(Column)의 값을 이용해 해시 값을 계산하여 인덱싱하는 알고리즘이다. 매우 빠른 검색을 지원하지만 거의 사용되지 않는다.</p><p>해시 자체가 1:1로만 대응되는 성질을 가지고 있기 때문에 범위 검색을 할 수 없다는 단점 때문이다.</p><h3 id="비트맵-인덱스"><a href="#비트맵-인덱스" class="headerlink" title="비트맵 인덱스"></a>비트맵 인덱스</h3><p>데이터를 비트 플래그로 변환해서 저장하는 형태의 인덱스이다. 테이블이 많은 행을 가지면서 카디널리티가 낮은 필드에 대해 유리하다. 하지만 키를 갱신할 떄 비용이 너무 크다는 단점이 있어서 갱신이 잘 일어나지 않는 경우에만 쓰인다.</p><h2 id="인덱스를-꼭-사용해야-할까"><a href="#인덱스를-꼭-사용해야-할까" class="headerlink" title="인덱스를 꼭 사용해야 할까?"></a>인덱스를 꼭 사용해야 할까?</h2><p>SELECT 쿼리의 성능을 향상시키는 인덱스는 모든 경우에서 좋다고 할 수 있을까?<br>가령 모든 컬럼에 인덱스를 생성하면 매우 빠른 검색 속도를 낼 수 있을까?</p><p>결론은 그렇지 않다.</p><p>인덱스를 사용하게 되면 INSERT, DELETE, UPDATE 쿼리를 실행할 때 인덱스를 위해 별도의 과정이 추가적으로 발생한다.</p><ul><li>INSERT 는 인덱스에 대한 데이터를 따로 추가해야한다.</li><li>DELETE 의 경우 인덱스에 존재하는 값은 삭제되지 않고 사용되지 않는다는 표시로 남게 된다.</li><li>UPDATE의 경우 INSERT 와 같이 인덱스 데이터가 추가되고 DELETE 와 같이 이전 데이터가 그대로 남아있게 될 것이다.</li></ul><p>컬럼에 저장되는 데이터의 형식에 따라서 인덱스의 성능이 좋지 않을 수 있다. 즉, 모든 컬럼에 대해 인덱스를 생성하는 것보다 인덱스가 생성되면 효율이 좋은 컬럼이 있다.</p><p>그렇다면 인덱스를 사용하기 위한 좋은 조건은 무엇일까?</p><p>다음의 두 가지 지표로 판단할 수 있다.</p><blockquote><p><code>카디널리티</code>와 <code>선택률</code>이다.</p></blockquote><ol><li><code>카디널리티</code>가 높아야한다.</li><li><code>선택률</code>이 낮아야한다.</li></ol><p>테이블에서 카디널리티가 가장 높은 필드는 모든 레코드에 다른 값이 들어가있는 유일 키 필드이다. 반대로 모든 레코드에 같은 값이 들어가 있다면 카디널리티가 낮은 필드이다.</p><p>선택률은 특정 필드값을 선택했을 때 테이블 전체에서 몇 개의 레코드가 선택되는지를 나타내는 개념이다.</p><p>예를 들면 100개의 레코드가 있는 테이블에서 where 절을 사용하여 유일 키 값인 id=1 로 조회한다면 단 하나의 레코드만 선택될 것이다.<br>이 때 1/100 = 0.01로 선택률은 1%이다.</p>]]></content:encoded>
      
      <comments>https://daphne-dev.github.io/2021/01/04/database-index/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
